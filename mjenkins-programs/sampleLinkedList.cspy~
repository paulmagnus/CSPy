class Node:
    :: value:int, next:Node ::
    def Node(value:int):
        value = value
        next = None

class LinkedList:
    :: size:int, head:Node ::
    def LinkedList():
        size = 0
        head = None
    def insert(value:int):
        :: temp:Node ::
        temp = Node(value)
        temp.next = head
        head = temp
        size += 1
    def search(value:int) -> int:
        :: index:int ::
        index = 0;
        current = head
        while current is not None:
            if value == current.value:
                return index
            else:
                current = current.next
                index += 1
        return -1
    def remove(index:int):
        :: temp:Node ::
        if index > size or index < 0:
            raise ValueError
        if head is None:
            return
        temp = head
        if index == 0:
            self.head = temp.next
            temp = none
            return
        for i in range(index - 1):
            temp = temp.next
            if temp is None:
                break
        if temp is None:
            return
        if temp.next is None:
            return
        next = temp.next.next
        temp.next = None
        temp.next = next
        size -= 1
    def printList():
        :: temp:Node ::
        temp = head
        while temp is not None:
            print(temp.value)
            temp = temp.next
        print('\n')

def main():
    listy = LinkedList();
    listy.insert(1)
    listy.insert(2)
    listy.insert(4)
    listy.insert(8)
    listy.insert(16)
    listy.printList()
    listy.remove(listy.search(8))
    listy.printList()

main()
