class Node:
    :: Value:int, Next:Node ::
    def Node(value:int):
        Value = value
        Next = None

class LinkedList:
    :: size:int, head:Node ::
    def LinkedList():
        size = 0
        head = None

    def insert(value:int):
        :: temp:Node ::
        temp = Node(value)
        temp.Next = head
        head = temp
        size += 1

    def search(value:int) -> int:
        :: index:int, current:Node ::
        index = 0;
        current = head
        while current is not None:
            if value == current.Value:
                return index
            else:
                current = current.Next
                index += 1
        return -1

    def remove(index:int):
        :: temp:Node, next:Node ::
        if index > size or index < 0:
            raise ValueError
        if head is None:
            return
        temp = head
        if index == 0:
            head = temp.Next
            temp = None
            return
        for i in range(index - 1):
            temp = temp.Next
            if temp is None:
                break
        if temp is None:
            return
        if temp.Next is None:
            return
        next = temp.Next.Next
        temp.Next = None
        temp.Next = next
        size -= 1

    def printList():
        :: temp:Node ::
        temp = head
        while temp is not None:
            print(temp.Value)
            temp = temp.Next
        print("")

def main():
    ::listy:LinkedList::
    listy = LinkedList();
    listy.insert(1)
    listy.insert(2)
    listy.insert(4)
    listy.insert(8)
    listy.insert(16)
    listy.printList()
    listy.remove(listy.search(8))
    listy.printList()

main()



