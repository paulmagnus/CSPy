''' tictictoe.cspy : a basic game of tic-tac-toe between two human players '''

def askrange(question:string, start:int, stop:int) -> int:
    """ Ask for a number within the given range """
    :: response:int ::

    response = -1
    while response not in range(start, stop):
        try:
            response = toint(input(question))
        except ValueError:
            response = -1
    return response


def playernames() -> list of string:
    """ Ask for the players names """
    :: players:list of string, number:int ::

    for i in 1..2:
        :: name:string ::
        name = input("Please enter the name of player " + tostring(i) + ": ")
        players.append(name)
    return players


def emptyboard() -> [[string]]:
    """ Create an empty tic-tac-toe board """
    :: board:[[string]] = []::
    for r in 1..3:
        :: row:[string] = [] ::
        for c in 1..3:
            row.append(" ")
        board.append(row)
    return board


def outputboard(board:[[string]]):
    """ Print a tic-tac-toe board """
    for i in 0..2:
         print(board[i][0] + " | " + board[i][1] + " | " +  board[i][2])
         if i != 2:
             print("__________")

     
def getmove(name:string) -> int:
    """ Ask for a players move """
    :: move:int ::
    move = askrange(name.title() + ", where would you like to move? (1 - 9) ", 1, 10)
    return move


def askquestion(question:string) -> string:
    """ Ask a yes or no question """
    ::response:string = ""::

    while response not in ("y", "n"):
        response = input(question)
    return response


def update(board:[[string]], move:int, piece:string) -> [[string]]:
    """ Place a piece on a tic-tac-toe board at the given location """
    :: row:int, col:int ::

    row = (move % 3 == 0) ? move / 3 - 1 : move / 3
    col = move % 3 - 1
    board[row][col] = piece
    return board


def checkwinner(board:[[string]]) -> bool:
    """ Check a tic-tac-toe board for a winner """
    :: waystowin:[[[int]]] ::

    waystowin =  [[[0,0], [1,0], [2,0]], 
                  [[0,1], [1,1], [2,1]],
                  [[0,2], [1,2], [2,2]],
                  [[0,0], [0,1], [0,2]],
                  [[1,0], [1,1], [1,2]],
                  [[2,0], [2,1], [2,2]],
                  [[0,0], [1,1], [2,2]],
                  [[2,0], [1,1], [0,2]]]
    
    for combination in waystowin:
        :: pieces:list of string ::
        pieces = map(lambda (coord:list of int) -> string : (board[coord[0]][coord[1]]), combination)
        if len(makeset(pieces)) == 1 and " " not in pieces:
            return True

    return False   


def catsgame(board:[[string]]) -> bool:
    """ Check if a tic-tac-toe board has any available spots """
    for r in 0..2:
        for c in 0..2:
            if board[r][c] == " ":
                return False

    return True

        
def game(players:list of string):
    """ Play a game of tic-tac-toe """
    :: turn:int = 0, winner:bool = False, board:[[string]],
       tokens:list of string, first:string, move:int, 
       legals:list of int = [1,2,3,4,5,6,7,8,9]::

    first = askquestion(players[0].title() + ", would you like to go first? (y/n) ")
    if first == "y":
        tokens = ["X", "O"]
        turn = 0
    else:
        tokens = ["O", "X"]
        turn = 1
        
    print("\n" + players[0].title() + " is '" + tokens[0] + "'.\n")
    print(players[1].title() + " is '" + tokens[1] + "'.\n")

    board = emptyboard()
    outputboard(board)
    
    while not winner and not catsgame(board):
        move = -1
        print("\nIt is " + players[turn].title() + "'s turn.\n")
        while move not in legals:
            move = getmove(players[turn])
        print("\n")
        board = update(board, move, tokens[turn])
        outputboard(board)
        legals.remove(move)
        winner = checkwinner(board)
        if winner:
            print("\nCongratulations, " + players[turn].title() + "! You won the game!\n")
        else:
            turn = (turn + 1) % 2

    if catsgame(board) and not winner:
        print("\nIt's a tie!\n")
               
def main():
    """ Play some tic-tac-toe! """
    :: playing:string = "y", players:list of string ::
    print("""Let's play tic-tac-toe! 

Make your move by entering a number 1 - 9 corresponding to the position 
on the board below

1 | 2 | 3
----------- 
4 | 5 | 6 
----------- 
7 | 8 | 9
""")
    while playing == "y":
        players = playernames()
        print("\n")
        game(players)
        playing = askquestion("Do you want to start a new game? (y/n) ")
    print("\nThanks for playing!")

main()
        
    
    

    
    


    
    
    


        



