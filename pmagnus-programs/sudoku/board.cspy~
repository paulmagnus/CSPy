'''
board.cspy
Paul Magnus
Sudoku
Summer 2017

This file contains the definition of a data structure that represents a sudoku board
in computer memory. The methods allow for interaction with the sudoku board as needed
to solve a sudoku puzzle.
'''

class sudokuboard:
    :: sboard : list of string ::
    def sudokuboard(board : list of string):
        '''
        Each of the strings in board must be 9 characters long
        and only contain 1,2,3,4,5,6,7,8,9,_

        Creates the sudokuboard
        '''
        sboard = []

        for i in 0..8:
            sboard.append(board[i])

    def place(r : int,
                c : int,
                n : string):
        '''
        r and c must be between 0 and 8
        n must be a character representing a numeral between 1 and 9

        if n can be placed at the location, it is placed there
        '''
        if canPlace(r,c,n):
            sboard[r][c] = n

    def output():
        '''
        The board is printed to the command line
        '''
        for i in 0..9:
            print(sboard[i])

    def get(r : int, c : int) -> string:
        '''
        r and c must be between 0 and 8

        returns the character at the location
        '''
        assert r < 9 and c < 9 and r >= 0 and c >= 0

        return sboard[r][c]

    def remove(r : int, c : int):
        '''
        r and c must be between 0 and 8

        removes the character at the location
        '''
        sboard[r][c] = '_'

    def canPlace(r : int, c : int, n : string) -> bool:
        '''
        r and c must be between 0 and 8
        n must be a character representing a numeral between 1 and 9

        returns whether n can be placed at the location based on sudoku rules
        '''
        :: rprime : int,
        cprime : int ::

        if isEmpty(r,c):
            for i in 0..9:
                # checks for the value n anywhere in the same row
                if n == sboard[r][i]:
                    return False
                # checks for the value n anywhere in the same column
                if n == sboard[i][c]:
                    return False

            # upper left corner of the 3x3 box that (r,c) is in
            # is determined by (rprime, cprime)
            rprime = r / 3 * 3
            cprime = c / 3 * 3
            # checks for the value n anywhere in the 3x3 box
            for i in 0..3:
                for j in 0..3:
                    if n == sboard[i + rprime][j + cprime]:
                        return False
        
            # only returns true if the value n is not found in any of the checks
            return True
        return False

    def isEmpty(r : int, c : int) -> bool:
        '''
        r and c must be between 0 and 8
        
        returns whethere the location is empty
        '''
        return sboard[r][c] == '_'

    def solved() -> bool:
        '''
        returns whether the puzzle has been solved yet
        '''
        for i in 0..9:
            for j in 0..9:
                if isEmpty(i,j):
                    return False
        return True

    def options(r : int, c : int) -> int:
        '''
        r and c must be between 0 and 8
        
        returns the number of available numbers for the location
        '''
        :: count : int = 0 ::
        for i in 1..10:
            if canPlace(r, c, tostring(i)):
                count = count + 1
        return count