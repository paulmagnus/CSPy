import random
from cs110graphics import *

PLAYERS = input("Enter the number of players (2-6): ")
while int(PLAYERS) < 2 or int(PLAYERS) > 6:
    PLAYERS = input("Enter the number of players (2-6): ")

# The countries are stored in lists of lists. Each internal list corresponds
# to a continent in the CONTINENTS list. The index of each internal list in
# COUNTRIES matches the index of its continent in CONTINENTS. The indexes
# are as follows:
#   0: North America
#   1: South America
#   2: Africa
#   3: Europe
#   4: Asia
#   5: Australia
    
CONTINENTS = ["North America", "South America", "Africa", "Europe", "Asia",
              "Australia"]
COUNTRIES = [["Alaska", "Northwest Territory", "Greenland", "Alberta",
              "Ontario", "Quebec", "Western United States", 
              "Eastern United States", "Central America"],
             ["Venezuala", "Brazil", "Peru", "Argentina"],
             ["North Africa", "Egypt", "East Africa", "Congo",
              "South Africa", "Madagascar"],
             ["Iceland", "Skandinavia", "Ukraine", "Southern Europe",
              "Northern Europe", "Great Britain", "Western Europe"],
             ["Ural", "Afghanistan", "Middle East", "India", "Siam",
              "China", "Siberia", "Mongolia", "Irkutsk", "Yakutsk", "Japan",
              "Kamchatka"],
             ["Indonesia", "New Guinea", "Western Australia",
              "Eastern Australia"]]

# VALUES contains the value of each continent for adding new armies. If a player
# controls the entire continent, they get an additional number of armies equal
# to the value.

VALUES = [5, 2, 5, 3, 7, 2]

# COLORS contains the color of each continent

COLORS = ["yellow", "red", "brown", "purple", "green", "pink"]

# POLYGONS uses the same structure as the countries list, amd matches the
# indexing of both the CONTINENTS and each individual country in the
# COUNTRIES list. Each country's index will be a list of tuples
# that form a polygon of the GENERAL SHAPE of the country -- this isn't
# 100% accurate.

POLYGONS = [[[(234, 242), (230, 237), (226, 233), (225, 230), (223, 227),
              (222, 224), (219, 220), (215, 218), (209, 214), (206, 210),
              (204, 206), (201, 201), (193, 198), (187, 196), (181, 195),
              (178, 192), (175, 190), (172, 188), (170, 190), (168, 193),
              (163, 196), (159, 199), (153, 200), (146, 202), (140, 202),
              (134, 202), (131, 200), (129, 197), (126, 197), (123, 194),
              (122, 192), (120, 188), (116, 186), (118, 183), (121, 179),
              (125, 176), (129, 174), (132, 170), (131, 167), (128, 166),
              (123, 166), (119, 166), (116, 161), (112, 158), (116, 156),
              (119, 153), (122, 153), (125, 156), (129, 157), (133, 153),
              (130, 151), (127, 149), (123, 146), (122, 143), (120, 140),
              (116, 138), (122, 134), (128, 128), (132, 121), (139, 118),
              (148, 115), (155, 117), (163, 120), (168, 122), (175, 124),
              (182, 126), (190, 128), (196, 130), (202, 134), (209, 135),
              (216, 141), (222, 147), (224, 150), (230, 157), (233, 164),
              (237, 170), (242, 176), (243, 182), (242, 187), (243, 192),
              (245, 196), (240, 200), (238, 208), (238, 213), (238, 218),
              (237, 225), (235, 230), (235, 240), (234, 242)],
             [(210, 137), (213, 138), (214, 140), (216, 142), (217, 143), 
              (219, 144), (220, 145), (222, 147), (223, 149), (226, 152), 
              (227, 154), (229, 156), (232, 159), (233, 163), (237, 169), 
              (239, 172), (242, 176), (243, 179), (242, 184), (241, 187), 
              (242, 193), (242, 197), (248, 195), (250, 192), (253, 190), 
              (256, 190), (260, 189), (263, 188), (266, 188), (271, 187), 
              (275, 187), (279, 186), (286, 185), (291, 186), (296, 186), 
              (299, 187), (304, 187), (307, 184), (310, 184), (316, 184), 
              (323, 186), (326, 186), (332, 181), (334, 179), (339, 177), 
              (339, 173), (342, 169), (348, 167), (348, 165), (348, 162), 
              (349, 158), (351, 154), (350, 150), (347, 148), (345, 143), 
              (345, 137), (341, 133), (340, 135), (336, 137), (329, 138), 
              (326, 141), (324, 145), (322, 146), (315, 145), (310, 145), 
              (307, 145), (303, 145), (301, 142), (297, 142), (294, 139), 
              (290, 141), (288, 143), (283, 144), (280, 144), (274, 145), 
              (269, 143), (266, 142), (269, 139), (267, 137), (265, 135), 
              (260, 135), (256, 132), (253, 130), (249, 128), (246, 127), 
              (244, 127), (243, 128), (241, 129), (237, 129), (234, 129), 
              (233, 127), (230, 125), (229, 122), (225, 124), (222, 127), 
              (219, 128), (214, 130), (210, 130), (211, 134), (212, 137)],
             [(475, 194), (471, 192), (470, 188), (467, 189), (465, 189), 
              (460, 185), (457, 181), (456, 179), (455, 175), (451, 172), 
              (451, 167), (449, 159), (449, 153), (448, 150), (447, 146), 
              (447, 141), (449, 138), (451, 135), (452, 133), (454, 127), 
              (454, 123), (454, 120), (453, 118), (452, 115), (452, 112), 
              (450, 109), (446, 109), (444, 103), (443, 100), (442, 96), 
              (440, 92), (440, 86), (440, 82), (436, 78), (435, 73), 
              (432, 70), (432, 67), (428, 65), (425, 62), (423, 61), 
              (419, 61), (415, 61), (407, 63), (405, 61), (402, 56), 
              (399, 54), (398, 49), (400, 45), (398, 40), (395, 38), 
              (393, 36), (394, 30), (399, 28), (399, 26), (402, 22), 
              (409, 22), (412, 19), (413, 15), (420, 11), (426, 11), 
              (432, 11), (439, 11), (442, 12), (449, 16), (453, 16), 
              (457, 13), (459, 14), (462, 17), (466, 16), (471, 16), 
              (475, 16), (482, 19), (483, 15), (487, 15), (495, 15), 
              (499, 16), (505, 17), (510, 17), (512, 18), (517, 17), 
              (521, 21), (526, 24), (531, 26), (532, 29), (538, 33), 
              (542, 36.125), (545, 40), (545, 44), (549, 48), (550, 51), 
              (548, 58), (544, 61), (545, 66), (547, 73), (545, 75), 
              (542, 82.125), (542, 87), (543, 91), (539, 98), (539, 107), 
              (539, 116), (535, 123), (528, 133), (522, 136), (515, 138), 
              (510, 140), (506, 142), (503, 150), (496, 155), (494, 155), 
              (488, 159), (483, 162), (484, 170), (483, 176), (478, 178), 
              (478, 185), (479, 188), (474, 194)],
             [(234, 241), (236, 236), (236, 232), (236, 227), (238, 225), 
              (239, 221), (239, 220), (239, 217), (238, 214), (237, 211), 
              (238, 205), (239, 202), (240, 199), (242, 197), (244, 197), 
              (247, 195), (251, 191), (253, 189), (260, 187), (263, 186), 
              (267, 186), (271, 185), (276, 184), (281, 184), (285, 183), 
              (289, 183), (294, 185), (298, 185), (300, 190), (300, 195), 
              (300, 200), (301, 204), (302, 208), (303, 212), (305, 214), 
              (305, 217), (304, 220), (303, 224), (304, 226), (307, 232), 
              (307, 239), (308, 244), (309, 248), (301, 250), (297, 250), 
              (293, 250), (290, 248), (286, 250), (282, 250), (275, 250), 
              (272, 251), (271, 252), (269, 250), (266, 250), (263, 250), 
              (260, 250), (254, 250), (251, 250), (246, 250), (244, 249), 
              (243, 247), (241, 246), (238, 245), (236, 243), (233, 242)],
             [(297.5, 186), (299.5, 190), (300.5, 195), (299.5, 196), 
              (299.5, 201), (301.5, 205), (302.5, 209), (302.5, 211), 
              (304.5, 217), (304.5, 220), (302.5, 226), (302.5, 230), 
              (306.5, 234), (306.5, 236), (306.5, 240), (309.5, 244), 
              (307.5, 247), (307.5, 250), (311.5, 251), (315.5, 254), 
              (317.5, 255), (320.5, 255), (322.5, 255), (324.5, 255), 
              (327.5, 255), (334.5, 255), (340.5, 256), (342.5, 257), 
              (346.5, 257), (349.5, 257), (352.5, 261), (352.5, 264), 
              (352.5, 267), (355.5, 272), (359.5, 272), (360.5, 271), 
              (361.5, 271), (365.5, 274), (366.5, 275), (369.5, 277), 
              (369.5, 280), (371.5, 279), (374.5, 280), (374.5, 279), 
              (376.5, 276), (374.5, 272), (372.5, 269), (371.5, 266), 
              (371.5, 262), (369.5, 259), (367.5, 257), (367.5, 254), 
              (367.5, 250), (367.5, 249), (369.5, 246), (369.5, 242), 
              (365.5, 239), (362.5, 236), (361.5, 231), (361.5, 226), 
              (360.5, 220), (356.5, 220), (354.5, 219), (350.5, 216), 
              (344.5, 214), (339.5, 211), (337.5, 211), (334.5, 211), 
              (331.5, 211), (331.5, 207), (330.5, 205), (329.5, 201), 
              (326.5, 201), (325.5, 197), (324.5, 195), (324.5, 191), 
              (325.5, 186), (321.5, 185), (319.5, 184), (316.5, 184), 
              (314.5, 184), (307.5, 184), (305.5, 184), (302.5, 184)],
             [(369.5, 242), (374.5, 239), (374.5, 236), (372.5, 230), 
              (371.5, 229), (371.5, 224), (374.5, 221), (375.5, 219), 
              (377.5, 215), (377.5, 211), (376.5, 201), (376.5, 201), 
              (376.5, 197), (375.5, 194), (375.5, 186), (375.5, 184), 
              (374.5, 181), (376.5, 179), (379.5, 180), (381.5, 181), 
              (386.5, 181), (390.5, 186), (394.5, 187), (396.5, 189), 
              (399.5, 192), (399.5, 195), (397.5, 199), (396.5, 202), 
              (401.5, 201), (401.5, 206), (406.5, 204), (407.5, 201), 
              (410.5, 200), (411.5, 196), (411.5, 194), (415.5, 197), 
              (416.5, 200), (420.5, 206), (420.5, 207), (421.5, 211), 
              (421.5, 217), (425.5, 219), (430.5, 221), (435.5, 224), 
              (436.5, 230), (439.5, 232), (439.5, 240), (434.5, 241), 
              (431.5, 242), (426.5, 242), (424.5, 244), (419.5, 244), 
              (414.5, 244), (410.5, 244), (409.5, 246), (406.5, 247), 
              (404.5, 249), (401.5, 252), (399.5, 255), (399.5, 257), 
              (395.5, 261), (394.5, 264), (392.5, 266), (390.5, 267), 
              (389.5, 269), (386.5, 271), (384.5, 271), (381.5, 271), 
              (379.5, 272), (377.5, 274), (376.5, 271), (374.5, 270), 
              (371.5, 267), (371.5, 266), (371.5, 262), (370.5, 260), 
              (370.5, 259), (370.5, 256), (369.5, 252), (369.5, 250), 
              (369.5, 244), (370.5, 241)],
             [(242.5, 250), (246.5, 250), (251.5, 251), (252.5, 251), 
              (257.5, 251), (261.5, 249), (265.5, 250), (267.5, 251), 
              (270.5, 251), (277.5, 251), (280.5, 251), (282.5, 249), 
              (289.5, 249), (292.5, 250), (296.5, 251), (302.5, 251), 
              (309.5, 251), (311.5, 251), (315.5, 252), (317.5, 255), 
              (317.5, 260), (317.5, 266), (316.5, 269), (316.5, 275), 
              (315.5, 279), (315.5, 282), (317.5, 286), (319.5, 290), 
              (316.5, 291), (314.5, 294), (314.5, 299), (312.5, 302), 
              (311.5, 304), (310.5, 305), (309.5, 310), (305.5, 307), 
              (301.5, 306), (300.5, 304), (295.5, 304), (291.5, 304), 
              (289.5, 304), (286.5, 304), (282.5, 304), (280.5, 304), 
              (276.5, 302), (274.5, 301), (271.5, 301), (267.5, 304), 
              (265.5, 306), (259.5, 306), (257.5, 307), (256.5, 309), 
              (254.5, 307), (251.5, 306), (249.5, 302), (247.5, 301), 
              (245.5, 299), (242.5, 295), (241.5, 291), (240.5, 289), 
              (239.5, 285), (240.5, 281), (239.5, 274), (240.5, 267), 
              (239.5, 260), (239.5, 256), (242.5, 251)],
             [(319.5, 255), (322.5, 255), (327.5, 255), (331.5, 255), 
              (335.5, 256), (337.5, 257), (342.5, 257), (346.5, 257), 
              (352.5, 260), (352.5, 266), (352.5, 270), (356.5, 272), 
              (357.5, 272), (362.5, 271), (366.5, 274), (367.5, 275), 
              (367.5, 277), (369.5, 280), (371.5, 279), (374.5, 280), 
              (377.5, 279), (377.5, 276), (379.5, 274), (382.5, 274), 
              (386.5, 272), (387.5, 270), (390.5, 269), (391.5, 266), 
              (394.5, 264), (396.5, 261), (396.5, 259), (396.5, 256), 
              (399.5, 255), (404.5, 254), (406.5, 251), (409.5, 251), 
              (411.5, 251), (410.5, 259), (412.5, 264), (410.5, 266), 
              (405.5, 269), (401.5, 271), (397.5, 271), (395.5, 275), 
              (395.5, 279), (395.5, 280), (391.5, 281), (390.5, 281), 
              (386.5, 282), (385.5, 286), (384.5, 290), (381.5, 291), 
              (380.5, 294), (379.5, 299), (379.5, 304), (379.5, 306), 
              (375.5, 309), (374.5, 310), (370.5, 312), (369.5, 315), 
              (366.5, 315), (365.5, 319), (364.5, 320), (364.5, 326), 
              (366.5, 329), (366.5, 330), (366.5, 334), (366.5, 337), 
              (362.5, 336), (361.5, 334), (361.5, 331), (360.5, 326), 
              (357.5, 324), (355.5, 321), (352.5, 321), (349.5, 321), 
              (346.5, 320), (341.5, 320), (340.5, 325), (334.5, 325), 
              (331.5, 324), (326.5, 324), (325.5, 324), (322.5, 326), 
              (320.5, 326), (319.5, 329), (319.5, 325), (317.5, 324), 
              (315.5, 320), (315.5, 319), (312.5, 317), (311.5, 315), 
              (310.5, 314), (309.5, 311), (309.5, 311), (309.5, 307), 
              (309.5, 304), (310.5, 301), (312.5, 301), (314.5, 294), 
              (314.5, 294), (315.5, 289), (316.5, 287), (316.5, 284), 
              (315.5, 280), (315.5, 271), (316.5, 267), (316.5, 261), 
              (317.5, 257)],
             [(256.5, 310), (259.5, 306), (261.5, 306), (265.5, 302), 
              (269.5, 301), (271.5, 301), (274.5, 301), (277.5, 304), 
              (279.5, 304), (284.5, 305), (287.5, 304), (292.5, 304), 
              (296.5, 304), (299.5, 305), (301.5, 306), (304.5, 307), 
              (306.5, 309), (309.5, 311), (311.5, 315), (314.5, 316), 
              (316.5, 319), (317.5, 322), (319.5, 327), (316.5, 330), 
              (316.5, 332), (316.5, 335), (316.5, 339), (315.5, 342), 
              (316.5, 347), (317.5, 351), (320.5, 355), (322.5, 357), 
              (325.5, 357), (329.5, 357), (331.5, 359), (334.5, 359), 
              (334.5, 356), (335.5, 354), (336.5, 351), (339.5, 351), 
              (341.5, 351), (344.5, 351), (349.5, 351), (345.5, 356), 
              (344.5, 359), (344.5, 362), (342.5, 366), (347.5, 366), 
              (354.5, 367), (357.5, 371), (357.5, 376), (356.5, 379), 
              (357.5, 381), (361.5, 386), (364.5, 387), (366.5, 386), 
              (369.5, 386), (374.5, 386), (377.5, 389), (375.5, 394), 
              (372.5, 391), (370.5, 390), (367.5, 391), (364.5, 391), 
              (361.5, 391), (357.5, 391), (352.5, 387), (351.5, 387), 
              (351.5, 385), (347.5, 381), (346.5, 377), (340.5, 375), 
              (336.5, 374), (332.5, 371), (329.5, 370), (327.5, 369), 
              (326.5, 367), (322.5, 369), (319.5, 369), (312.5, 367), 
              (311.5, 367), (309.5, 366), (306.5, 364), (302.5, 362), 
              (301.5, 361), (297.5, 359), (294.5, 357), (294.5, 354), 
              (294.5, 349), (292.5, 346), (289.5, 344), (285.5, 341), 
              (279.5, 339), (279.5, 339), (274.5, 334), (274, 334), 
              (269, 330), (265, 329), (262, 321), (261, 319), 
              (259, 315), (259, 313), (257, 310)]],
            [[(374, 393), (376, 390), (379, 388), (381, 385), (385, 384), 
              (391, 383), (395, 383), (402, 384), (406, 385), (410, 388), 
              (411, 386), (417, 385), (425, 389), (426, 391), (429, 391), 
              (431, 396), (434, 398), (437, 399), (441, 399), (442, 399), 
              (446, 399), (447, 401), (452, 405), (452, 408), (454, 410), 
              (455, 414), (452, 418), (451, 421), (449, 421), (445, 423), 
              (441, 423), (440, 425), (437, 426), (435, 426), (431, 425), 
              (430, 423), (429, 420), (429, 418), (426, 415), (425, 415), 
              (421, 415), (419, 415), (416, 415), (414, 415), (411, 416), 
              (409, 418), (406, 421), (406, 423), (405, 425), (405, 428), 
              (401, 428), (396, 429), (394, 430), (392, 431), (390, 435), 
              (389, 439), (385, 440), (380, 436), (377, 435), (372, 436), 
              (370, 436), (370, 435), (367, 433), (367, 433), (366, 430), 
              (366, 426), (366, 420), (368, 418), (368, 415), (368, 415), 
              (370, 414), (372, 410), (373, 410), (375, 408), (378, 405), 
              (377, 401), (377, 398), (376, 396)],
             [(397, 431), (397, 430), (405, 430), (405, 428), (405, 425), 
              (406, 423), (406, 420), (406, 419), (412, 418), (413, 416), 
              (415, 416), (420, 415), (422, 415), (425, 414), (427, 415), 
              (427, 419), (427, 420), (430, 423), (430, 424), (431, 425), 
              (432, 428), (437, 428), (440, 428), (441, 426), (442, 428), 
              (447, 425), (448, 424), (450, 423), (452, 421), (455, 421), 
              (461, 421), (463, 419), (468, 420), (473, 425), (478, 424), 
              (485, 425), (487, 426), (490, 428), (493, 429), (498, 431), 
              (500, 435), (501, 440), (498, 443), (495, 446), (492, 449), 
              (491, 450), (491, 453), (487, 454), (487, 458), (486, 463), 
              (486, 468), (486, 475), (480, 480), (477, 483), (471, 483), 
              (465, 485), (463, 489), (461, 491), (460, 495), (460, 499), 
              (460, 501), (456, 504), (452, 511), (450, 515), (447, 520), 
              (445, 521), (442, 523), (440, 523), (436, 523), (432, 521), 
              (431, 521), (427, 521), (426, 520), (425, 518), (425, 514), 
              (425, 513), (422, 511), (421, 508), (418, 505), (418, 504), 
              (420, 503), (421, 501), (422, 500), (423, 498), (425, 493), 
              (427, 491), (427, 489), (427, 484), (427, 483), (427, 481), 
              (425, 479), (425, 475), (422, 471), (423, 470), (423, 470), 
              (421, 465), (416, 463), (413, 465), (411, 466), (410, 464), 
              (410, 461), (408, 461), (406, 460), (402, 456), (402, 453), 
              (402, 449), (401, 448), (400, 445), (400, 443), (397, 440), 
              (398, 438), (400, 435), (397, 435)],
             [(395, 430), (392, 430), (391, 431), (390, 436), (390, 438), 
              (383, 438), (378, 436), (376, 435), (375, 435), (372, 435), 
              (370, 436), (372, 440), (372, 441), (375, 448), (376, 449), 
              (378, 456), (380, 458), (380, 459), (382, 460), (385, 461), 
              (387, 464), (388, 465), (390, 465), (392, 466), (395, 469), 
              (397, 471), (397, 478), (397, 479), (397, 483), (397, 485), 
              (397, 489), (397, 491), (398, 491), (401, 490), (403, 490), 
              (403, 491), (405, 491), (405, 495), (406, 498), (408, 496), 
              (412, 494), (415, 493), (415, 491), (416, 490), (417, 489), 
              (420, 489), (422, 491), (425, 495), (425, 495), (426, 493), 
              (426, 489), (425, 485), (425, 481), (426, 480), (425, 478), 
              (425, 476), (423, 475), (422, 473), (422, 471), (422, 470), 
              (425, 469), (422, 465), (420, 464), (417, 463), (417, 463), 
              (412, 465), (411, 465), (410, 464), (410, 461), (407, 461), 
              (406, 458), (403, 456), (402, 455), (402, 449), (402, 445), 
              (400, 445), (400, 444), (398, 440), (398, 438), (400, 435), 
              (398, 433), (397, 433)],
             [(396, 493), (400, 493), (402, 491), (406, 493), (406, 496), 
              (410, 496), (412, 496), (413, 495), (415, 493), (417, 490), 
              (420, 489), (422, 493), (425, 494), (425, 496), (425, 498), 
              (425, 499), (422, 500), (422, 501), (421, 503), (420, 503), 
              (417, 505), (420, 509), (420, 509), (422, 510), (426, 511), 
              (426, 513), (427, 515), (425, 518), (422, 519), (425, 521), 
              (428, 521), (430, 523), (432, 526), (435, 528), (436, 530), 
              (435, 533), (431, 534), (428, 536), (425, 536), (421, 536), 
              (420, 538), (420, 543), (420, 545), (420, 548), (416, 551), 
              (413, 554), (412, 558), (408, 563), (407, 566), (407, 570), 
              (407, 574), (406, 578), (403, 579), (401, 584), (401, 588), 
              (401, 591), (402, 595), (403, 599), (407, 603), (410, 604), 
              (413, 606), (411, 608), (406, 609), (402, 608), (397, 606), 
              (392, 603), (391, 600), (390, 598), (387, 595), (385, 589), 
              (385, 586), (385, 580), (385, 576), (385, 570), (386, 565), 
              (386, 561), (386, 555), (386, 550), (387, 544), (387, 538), 
              (388, 535), (390, 530), (391, 526), (392, 523), (393, 519), 
              (392, 514), (392, 508), (392, 503), (395, 500), (396, 494), 
              (396, 493)]],
            [[(631, 415), (631, 413), (632, 411), (632, 408), (631, 405), 
              (628, 403), (626, 401), (623, 401), (620, 401), (617, 398), 
              (615, 396), (611, 396), (610, 396), (607, 396), (603, 398), 
              (602, 398), (597, 403), (595, 400), (592, 400), (588, 399), 
              (585, 399), (583, 400), (580, 403), (573, 399), (571, 396), 
              (568, 395), (565, 391), (563, 388), (562, 385), (558, 381), 
              (556, 380), (555, 379), (553, 375), (552, 370), (555, 366), 
              (555, 363), (555, 360), (555, 356), (553, 350), (555, 346), 
              (556, 343), (557, 340), (560, 338), (560, 336), (562, 333), 
              (565, 331), (567, 330), (572, 328), (573, 325), (575, 321), 
              (575, 316), (577, 313), (580, 310), (582, 309), (583, 308), 
              (585, 304), (587, 303), (588, 305), (591, 305), (592, 305), 
              (595, 305), (597, 305), (602, 304), (605, 303), (606, 301), 
              (610, 301), (613, 300), (618, 299), (622, 299), (626, 298), 
              (631, 298), (632, 303), (635, 306), (635, 311), (640, 313), 
              (642, 315), (646, 315), (647, 318), (650, 320), (651, 320), 
              (655, 320), (656, 321), (657, 323), (657, 325), (657, 329), 
              (656, 331), (653, 333), (652, 335), (652, 338), (652, 339), 
              (650, 340), (648, 344), (648, 350), (646, 350), (645, 353), 
              (645, 358), (648, 359), (652, 359), (657, 360), (661, 363), 
              (663, 365), (666, 368), (670, 370), (671, 373), (666, 374), 
              (665, 375), (665, 378), (667, 381), (668, 385), (670, 389), 
              (673, 391), (676, 393), (680, 393), (681, 395), (676, 396), 
              (673, 398), (671, 398), (665, 398), (662, 399), (660, 400), 
              (655, 403), (652, 405), (650, 405), (646, 406), (642, 408), 
              (643, 411), (645, 415), (640, 415), (638, 415), (637, 415), 
              (633, 415)],
             [(657, 323), (660, 323), (660, 323), (662, 319), (662, 318), 
              (662, 313), (667, 312), (669, 317), (674, 317), (676, 319), 
              (679, 319), (684, 319), (686, 322), (689, 322), (691, 320), 
              (694, 319), (697, 320), (697, 324), (697, 327), (699, 330), 
              (702, 334), (705, 339), (706, 342), (707, 347), (707, 348), 
              (701, 349), (701, 355), (699, 357), (692, 359), (686, 358), 
              (684, 357), (684, 360), (680, 363), (677, 364), (675, 367), 
              (674, 370), (671, 372), (671, 374), (669, 369), (666, 368), 
              (664, 365), (660, 363), (656, 360), (654, 360), (652, 359), 
              (649, 359), (646, 358), (644, 357), (644, 354), (647, 353), 
              (647, 347), (647, 345), (650, 344), (652, 342), (651, 339), 
              (654, 335), (654, 334), (655, 332), (657, 329), (657, 327), 
              (656, 325)],
             [(707, 347), (710, 349), (711, 355), (711, 359), (714, 362), 
              (716, 364), (717, 369), (720, 373), (721, 373), (724, 374), 
              (726, 380), (730, 384), (735, 384), (739, 384), (741, 384), 
              (746, 383), (749, 380), (750, 380), (750, 388), (747, 393), 
              (745, 395), (744, 399), (741, 403), (740, 404), (739, 407), 
              (736, 409), (731, 412), (730, 413), (729, 414), (725, 417), 
              (721, 422), (720, 424), (719, 429), (719, 428), (716, 429), 
              (716, 432), (716, 437), (720, 439), (720, 443), (720, 448), 
              (720, 450), (720, 457), (720, 460), (717, 462), (711, 465), 
              (709, 463), (706, 459), (705, 459), (702, 458), (700, 455), 
              (699, 453), (695, 452), (691, 453), (689, 453), (686, 454), 
              (686, 463), (684, 458), (680, 455), (679, 453), (681, 449), 
              (682, 447), (680, 447), (679, 444), (676, 443), (676, 443), 
              (676, 439), (676, 438), (676, 433), (675, 432), (676, 429), 
              (675, 427), (674, 424), (675, 423), (677, 419), (680, 418), 
              (680, 414), (680, 412), (679, 407), (679, 403), (681, 402), 
              (681, 399), (680, 395), (677, 393), (675, 392), (671, 390), 
              (669, 388), (669, 385), (667, 384), (666, 382), (664, 379), 
              (666, 377), (667, 375), (669, 374), (671, 373), (674, 370), 
              (677, 369), (676, 364), (681, 364), (682, 360), (684, 357), 
              (687, 357), (692, 357), (694, 357), (697, 357), (699, 353), 
              (701, 352), (704, 349), (706, 349)],
             [(631, 415), (634, 415), (636, 415), (637, 415), (640, 415), 
              (644, 414), (644, 412), (642, 408), (646, 407), (649, 407), 
              (654, 403), (656, 402), (660, 399), (661, 399), (665, 398), 
              (667, 397), (671, 398), (674, 398), (676, 397), (679, 395), 
              (679, 399), (679, 400), (679, 403), (679, 405), (679, 407), 
              (679, 410), (681, 414), (681, 415), (681, 420), (677, 420), 
              (676, 423), (676, 427), (676, 429), (676, 432), (676, 434), 
              (677, 439), (676, 442), (672, 442), (672, 443), (670, 444), 
              (667, 447), (666, 447), (666, 449), (666, 450), (666, 455), 
              (662, 454), (661, 452), (659, 450), (659, 449), (659, 447), 
              (657, 444), (657, 442), (656, 443), (656, 442), (654, 442), 
              (654, 442), (651, 442), (649, 444), (646, 444), (645, 445), 
              (644, 448), (644, 444), (641, 442), (641, 439), (640, 437), 
              (640, 434), (639, 432), (639, 430), (636, 428), (636, 427), 
              (634, 425), (634, 423), (630, 420), (629, 420)],
             [(645, 447), (644, 450), (641, 452), (639, 455), (639, 460), 
              (637, 464), (637, 468), (637, 469), (640, 473), (644, 475), 
              (645, 479), (645, 482), (645, 484), (646, 490), (646, 493), 
              (646, 498), (649, 503), (652, 507), (655, 510), (657, 514), 
              (655, 519), (656, 522), (660, 523), (664, 520), (669, 519), 
              (671, 519), (674, 522), (679, 520), (684, 518), (685, 517), 
              (687, 514), (689, 510), (690, 509), (694, 505), (694, 504), 
              (695, 503), (699, 503), (699, 502), (699, 497), (697, 494), 
              (700, 492), (701, 490), (705, 489), (705, 484), (705, 482), 
              (705, 479), (705, 475), (704, 475), (706, 473), (707, 470), 
              (709, 468), (712, 467), (709, 464), (706, 462), (706, 462), 
              (704, 457), (701, 458), (699, 454), (697, 452), (696, 452), 
              (694, 453), (692, 454), (689, 453), (687, 455), (686, 459), 
              (684, 457), (680, 452), (681, 449), (684, 448), (679, 445), 
              (676, 443), (672, 445), (669, 447), (666, 448), (667, 453), 
              (662, 453), (661, 452), (659, 449), (659, 445), (657, 443), 
              (656, 443), (652, 443), (649, 444), (647, 444), (645, 445)],
             [(734, 493), (731, 490), (731, 484), (729, 483), (730, 480), 
              (731, 478), (732, 475), (734, 473), (731, 469), (731, 467), 
              (734, 462), (735, 462), (739, 462), (741, 454), (746, 452), 
              (749, 454), (749, 459), (749, 460), (749, 460), (747, 463), 
              (747, 467), (746, 467), (746, 472), (745, 475), (745, 475), 
              (745, 480), (744, 482), (744, 484), (742, 487), (741, 488), 
              (739, 489), (739, 489)]],
            [[(536, 170), (542, 170), (543, 172), (546, 173), (550, 173), 
              (551, 173), (551, 171), (553, 171), (556, 170), (560, 168), 
              (561, 167), (562, 165), (562, 162), (562, 160), (560, 158), 
              (558, 156), (557, 153), (552, 153), (550, 155), (548, 156), 
              (545, 156), (540, 156), (540, 158), (537, 160), (536, 163), 
              (537, 166)],
             [(691, 196), (690, 194), (687, 194), (687, 191), (685, 191), 
              (681, 191), (677, 192), (675, 194), (672, 195), (668, 194), 
              (667, 192), (665, 189), (667, 186), (665, 181), (663, 177), 
              (666, 177), (670, 175), (671, 174), (672, 169), (676, 166), 
              (676, 165), (677, 164), (677, 160), (675, 157), (672, 156), 
              (670, 156), (668, 157), (667, 160), (665, 161), (665, 165), 
              (665, 168), (663, 168), (658, 172), (656, 175), (652, 177), 
              (652, 181), (652, 185), (652, 190), (653, 192), (652, 196), 
              (652, 200), (651, 201), (651, 206), (651, 207), (650, 210), 
              (647, 213), (645, 215), (643, 217), (641, 217), (641, 215), 
              (641, 211), (638, 210), (637, 207), (636, 205), (636, 202), 
              (633, 200), (633, 196), (632, 198), (631, 199), (631, 200), 
              (628, 200), (628, 204), (626, 205), (622, 205), (621, 204), 
              (618, 203), (618, 199), (619, 196), (618, 194), (618, 193), 
              (621, 193), (619, 188), (619, 185), (621, 183), (623, 179), 
              (626, 179), (626, 175), (629, 175), (631, 173), (633, 173), 
              (633, 170), (633, 167), (636, 165), (637, 161), (638, 158), 
              (638, 155), (641, 153), (642, 152), (643, 150), (643, 148), 
              (646, 146), (647, 145), (648, 145), (648, 143), (649, 140), 
              (651, 139), (652, 139), (653, 137), (656, 135), (656, 129), 
              (658, 129), (662, 127), (663, 125), (666, 124), (667, 122), 
              (668, 120), (673, 119), (677, 120), (683, 120), (687, 120), 
              (691, 122), (692, 125), (689, 127), (688, 129), (687, 132), 
              (686, 135), (686, 139), (686, 142), (684, 144), (684, 148), 
              (686, 149), (687, 150), (691, 154), (693, 155), (694, 157), 
              (694, 162), (694, 162), (694, 164), (692, 166), (692, 169), 
              (692, 173), (693, 173), (696, 176), (698, 178), (699, 178), 
              (700, 179), (702, 183), (702, 186), (702, 191), (701, 191), 
              (701, 193), (699, 193), (699, 196), (700, 198), (697, 198), 
              (696, 197), (694, 197), (692, 196)],
             [(689, 196), (686, 196), (684, 197), (682, 198), (679, 198), 
              (674, 198), (672, 201), (672, 203), (675, 203), (675, 206), 
              (674, 208), (672, 212), (671, 212), (670, 211), (669, 208), 
              (665, 208), (665, 212), (664, 213), (664, 214), (664, 217), 
              (664, 221), (664, 224), (661, 227), (660, 230), (660, 234), 
              (659, 236), (659, 239), (656, 241), (656, 244), (660, 244), 
              (662, 244), (664, 245), (669, 245), (671, 246), (676, 245), 
              (676, 245), (679, 245), (679, 246), (680, 249), (684, 250), 
              (684, 254), (685, 256), (687, 260), (688, 261), (690, 261), 
              (692, 261), (694, 261), (695, 261), (698, 261), (699, 264), 
              (702, 264), (702, 266), (707, 266), (709, 266), (710, 269), 
              (712, 270), (715, 271), (717, 271), (720, 274), (721, 274), 
              (721, 271), (721, 267), (721, 265), (722, 264), (723, 264), 
              (723, 262), (723, 261), (727, 259), (728, 256), (731, 255), 
              (732, 254), (735, 254), (735, 256), (736, 259), (737, 259), 
              (740, 259), (740, 257), (742, 256), (742, 255), (746, 252), 
              (747, 250), (747, 245), (747, 243), (750, 240), (751, 238), 
              (751, 236), (752, 236), (753, 232), (755, 232), (757, 231), 
              (760, 231), (762, 231), (763, 231), (765, 227), (763, 225), 
              (762, 223), (762, 221), (762, 220), (761, 217), (760, 216), 
              (757, 215), (757, 212), (757, 210), (756, 204), (756, 203), 
              (756, 199), (758, 198), (760, 193), (758, 191), (758, 189), 
              (760, 186), (761, 184), (761, 179), (762, 179), (762, 176), 
              (761, 175), (761, 173), (764, 170), (766, 169), (769, 168), 
              (769, 166), (771, 165), (771, 161), (772, 159), (772, 157), 
              (772, 155), (772, 152), (772, 150), (771, 147), (770, 146), 
              (770, 144), (769, 141), (770, 138), (767, 137), (762, 137), 
              (762, 141), (757, 138), (753, 138), (750, 143), (747, 143), 
              (745, 144), (742, 147), (740, 148), (738, 148), (732, 151), 
              (731, 153), (727, 153), (722, 153), (722, 157), (719, 158), 
              (719, 163), (722, 164), (716, 164), (713, 167), (713, 169), 
              (708, 169), (706, 167), (703, 166), (704, 164), (693, 160), 
              (703, 159), (703, 156), (701, 154), (697, 153), (697, 150), 
              (695, 145), (698, 149), (701, 150), (703, 150), (708, 153), 
              (711, 153), (714, 154), (716, 154), (718, 154), (719, 154), 
              (721, 151), (722, 146), (721, 146), (719, 142), (716, 141), 
              (714, 139), (714, 137), (711, 134), (706, 131), (702, 131), 
              (699, 130), (696, 126), (691, 127), (690, 127), (689, 130), 
              (687, 131), (686, 132), (686, 134), (684, 137), (683, 142), 
              (684, 143), (684, 146), (687, 148), (690, 153), (692, 157), 
              (694, 161), (693, 164), (690, 168), (693, 172), (698, 173), 
              (699, 176), (700, 179), (702, 183), (703, 186), (701, 188), 
              (700, 192), (699, 195), (699, 198), (695, 198)],
             [(691, 263), (690, 260), (688, 259), (685, 255), (685, 253), 
              (681, 250), (679, 245), (671, 245), (668, 244), (661, 243), 
              (659, 243), (655, 245), (655, 249), (653, 250), (651, 253), 
              (645, 253), (641, 253), (638, 253), (635, 253), (631, 253), 
              (631, 248), (629, 248), (626, 250), (624, 250), (621, 250), 
              (619, 253), (619, 255), (621, 259), (621, 261), (623, 265), 
              (621, 268), (624, 270), (626, 270), (628, 270), (630, 270), 
              (631, 271), (634, 275), (635, 278), (636, 279), (639, 281), 
              (643, 283), (645, 284), (646, 285), (649, 286), (649, 290), 
              (649, 293), (649, 294), (650, 294), (651, 293), (654, 291), 
              (651, 288), (651, 286), (655, 286), (654, 285), (651, 283), 
              (650, 283), (648, 280), (648, 278), (645, 276), (643, 276), 
              (642, 275), (641, 273), (640, 271), (640, 270), (640, 268), 
              (640, 268), (642, 267), (642, 267), (645, 267), (646, 272), 
              (647, 272), (648, 273), (650, 277), (651, 277), (656, 277), 
              (656, 280), (658, 282), (658, 283), (660, 283), (661, 287), 
              (663, 288), (665, 292), (665, 295), (668, 296), (670, 293), 
              (669, 292), (669, 288), (669, 287), (673, 283), (673, 283), 
              (676, 285), (680, 286), (680, 286), (681, 286), (683, 286), 
              (685, 285), (686, 285), (685, 283), (685, 280), (684, 280), 
              (683, 277), (683, 275), (686, 272), (685, 271), (685, 268), 
              (688, 268), (688, 267), (690, 263)],
             [(662, 233), (659, 234), (657, 234), (655, 233), (654, 233), 
              (650, 233), (649, 234), (645, 235), (644, 236), (643, 239), 
              (640, 236), (639, 236), (636, 236), (633, 236), (631, 234), 
              (630, 235), (629, 235), (629, 236), (628, 238), (626, 238), 
              (624, 239), (623, 239), (621, 240), (619, 240), (618, 241), 
              (618, 244), (618, 244), (618, 245), (618, 245), (618, 248), 
              (614, 248), (614, 249), (613, 249), (611, 250), (609, 251), 
              (609, 253), (608, 255), (608, 255), (609, 256), (610, 258), 
              (613, 258), (615, 259), (618, 259), (618, 259), (619, 259), 
              (621, 260), (622, 260), (625, 260), (626, 260), (627, 260), 
              (630, 260), (630, 259), (631, 258), (632, 258), (634, 260), 
              (634, 261), (636, 261), (637, 263), (640, 263), (641, 265), 
              (644, 265), (649, 265), (653, 264), (653, 261), (654, 260), 
              (657, 258), (658, 256), (658, 255), (658, 253), (658, 250), 
              (659, 250), (662, 246), (662, 244), (662, 241), (660, 238), 
              (662, 238), (663, 236), (663, 233)],
             [(606, 235), (604, 235), (604, 232), (602, 231), (601, 227), 
              (599, 225), (597, 221), (597, 220), (595, 217), (594, 217), 
              (592, 215), (595, 212), (596, 211), (596, 206), (594, 207), 
              (592, 207), (592, 206), (592, 205), (590, 205), (589, 205), 
              (587, 207), (586, 207), (586, 211), (584, 213), (584, 217), 
              (582, 220), (581, 221), (579, 222), (576, 222), (574, 226), 
              (572, 231), (572, 235), (572, 236), (575, 237), (577, 237), 
              (580, 236), (581, 235), (586, 235), (589, 236), (590, 237), 
              (589, 242), (590, 243), (592, 243), (595, 242), (596, 242), 
              (597, 242), (600, 242), (601, 242), (602, 242), (603, 242), 
              (604, 242), (604, 240)],
             [(607, 245), (605, 247), (605, 248), (604, 249), (604, 249), 
              (603, 248), (600, 247), (598, 247), (599, 249), (599, 253), 
              (596, 252), (591, 252), (590, 252), (590, 253), (593, 255), 
              (595, 257), (596, 258), (598, 260), (598, 262), (600, 263), 
              (600, 267), (601, 268), (600, 272), (600, 273), (598, 274), 
              (595, 274), (594, 274), (594, 274), (592, 274), (592, 274), 
              (591, 274), (589, 274), (587, 274), (584, 274), (581, 272), 
              (579, 274), (579, 274), (579, 278), (577, 281), (577, 282), 
              (577, 287), (577, 290), (576, 291), (576, 295), (577, 296), 
              (577, 296), (579, 296), (581, 296), (582, 297), (584, 297), 
              (586, 299), (587, 301), (587, 302), (589, 300), (591, 300), 
              (594, 300), (595, 300), (597, 297), (601, 296), (602, 296), 
              (604, 294), (605, 291), (604, 291), (604, 290), (604, 287), 
              (605, 287), (606, 285), (607, 282), (610, 281), (611, 281), 
              (611, 280), (611, 277), (611, 275), (612, 273), (614, 273), 
              (617, 275), (621, 276), (622, 275), (624, 275), (625, 272), 
              (626, 272), (626, 270), (626, 272), (624, 271), (624, 270), 
              (623, 268), (621, 266), (621, 265), (621, 262), (621, 260), 
              (621, 259), (621, 257), (619, 255), (618, 254), (619, 252), 
              (621, 249), (618, 249), (616, 249), (613, 249), (612, 248), 
              (611, 248), (608, 248)]],
            [[(770, 137), (769, 141), (771, 145), (772, 148), (772, 151), 
              (772, 154), (771, 155), (772, 160), (772, 162), (770, 165), 
              (766, 167), (765, 170), (762, 174), (762, 179), (762, 181), 
              (762, 183), (762, 186), (759, 189), (759, 193), (757, 194), 
              (757, 197), (760, 201), (755, 202), (756, 206), (757, 211), 
              (757, 216), (760, 217), (761, 219), (764, 219), (766, 220), 
              (770, 223), (771, 224), (775, 225), (777, 226), (780, 228), 
              (781, 230), (786, 230), (790, 230), (792, 230), (794, 229), 
              (797, 226), (798, 226), (802, 227), (806, 229), (807, 232), 
              (810, 236), (812, 238), (812, 242), (812, 246), (812, 247), 
              (812, 250), (816, 251), (816, 255), (821, 256), (823, 258), 
              (825, 260), (826, 263), (826, 267), (829, 269), (832, 272), 
              (836, 272), (837, 269), (841, 269), (841, 272), (840, 273), 
              (840, 276), (842, 280), (843, 281), (841, 283), (841, 286), 
              (840, 290), (843, 287), (845, 286), (848, 286), (850, 286), 
              (853, 286), (854, 285), (857, 283), (861, 282), (861, 279), 
              (862, 278), (863, 277), (863, 274), (863, 272), (866, 270), 
              (867, 267), (868, 267), (868, 265), (867, 262), (867, 260), 
              (865, 259), (863, 258), (863, 258), (865, 256), (866, 256), 
              (866, 252), (865, 250), (865, 247), (865, 246), (866, 242), 
              (865, 241), (865, 240), (865, 238), (867, 237), (867, 232), 
              (866, 231), (866, 231), (864, 229), (862, 229), (859, 229), 
              (858, 227), (858, 226), (856, 225), (854, 226), (853, 225), 
              (851, 225), (849, 224), (847, 221), (847, 219), (847, 217), 
              (848, 216), (848, 215), (848, 212), (848, 211), (849, 210), 
              (850, 210), (850, 207), (851, 206), (852, 206), (852, 204), 
              (850, 200), (852, 200), (853, 199), (852, 195), (850, 195), 
              (847, 195), (845, 194), (842, 194), (841, 192), (837, 191), 
              (837, 190), (837, 186), (836, 183), (835, 181), (835, 178), 
              (832, 176), (833, 173), (836, 172), (837, 172), (837, 170), 
              (838, 170), (840, 167), (842, 167), (843, 166), (843, 165), 
              (841, 163), (840, 161), (840, 161), (837, 158), (836, 159), 
              (831, 162), (831, 161), (828, 161), (828, 157), (828, 156), 
              (828, 155), (828, 151), (828, 151), (830, 149), (830, 146), 
              (830, 144), (830, 143), (830, 140), (828, 140), (827, 136), 
              (826, 135), (822, 135), (821, 135), (820, 135), (816, 134), 
              (815, 133), (813, 130), (813, 126), (813, 122), (813, 119), 
              (815, 116), (815, 112), (812, 111), (812, 107), (813, 107), 
              (813, 105), (813, 102), (813, 99), (812, 99), (810, 97), 
              (808, 99), (805, 99), (805, 101), (805, 103), (805, 104), 
              (802, 105), (802, 110), (801, 110), (798, 114), (798, 114), 
              (798, 116), (799, 118), (801, 123), (798, 123), (798, 125), 
              (801, 127), (803, 128), (803, 132), (803, 136), (803, 138), 
              (801, 138), (800, 137), (798, 134), (795, 133), (795, 132), 
              (792, 131), (791, 128), (790, 128), (787, 128), (786, 127), 
              (782, 127), (781, 127), (780, 127), (780, 129), (780, 131), 
              (782, 133), (781, 133), (780, 133), (780, 137), (775, 138), 
              (775, 136), (775, 134), (775, 133), (773, 134), (772, 134)],
             [(761, 218), (763, 218), (765, 219), (766, 221), (768, 223), 
              (771, 223), (773, 224), (776, 224), (777, 223), (781, 224), 
              (782, 226), (786, 228), (789, 228), (792, 228), (795, 228), 
              (796, 227), (797, 226), (799, 226), (800, 226), (802, 227), 
              (805, 228), (806, 231), (810, 233), (811, 236), (812, 240), 
              (811, 241), (811, 245), (811, 246), (810, 247), (812, 251), 
              (816, 252), (817, 252), (818, 254), (822, 256), (823, 257), 
              (823, 260), (823, 261), (823, 262), (825, 264), (827, 267), 
              (827, 268), (828, 269), (829, 269), (832, 269), (834, 270), 
              (835, 270), (837, 270), (839, 268), (840, 268), (841, 269), 
              (841, 272), (840, 272), (839, 273), (839, 273), (839, 276), 
              (840, 277), (841, 279), (843, 280), (843, 284), (843, 286), 
              (840, 286), (838, 286), (838, 291), (838, 294), (838, 296), 
              (836, 300), (835, 301), (833, 302), (829, 304), (828, 306), 
              (828, 309), (829, 310), (830, 312), (831, 315), (833, 317), 
              (830, 319), (828, 320), (825, 320), (817, 320), (816, 319), 
              (814, 317), (811, 314), (809, 314), (804, 316), (804, 316), 
              (802, 317), (800, 318), (797, 319), (794, 321), (794, 323), 
              (791, 326), (791, 323), (791, 322), (792, 320), (794, 319), 
              (792, 314), (792, 313), (791, 310), (791, 308), (791, 305), 
              (791, 304), (791, 301), (793, 299), (793, 296), (790, 294), 
              (788, 294), (786, 293), (784, 291), (781, 287), (781, 286), 
              (780, 284), (779, 282), (774, 281), (773, 278), (769, 277), 
              (765, 276), (763, 278), (760, 278), (756, 278), (753, 278), 
              (749, 281), (746, 281), (744, 281), (741, 279), (739, 278), 
              (735, 277), (734, 277), (731, 277), (730, 277), (728, 277), 
              (726, 277), (725, 277), (724, 276), (721, 273), (721, 272), 
              (721, 271), (720, 268), (720, 266), (721, 264), (723, 262), 
              (725, 261), (725, 258), (726, 257), (729, 256), (731, 256), 
              (733, 253), (734, 253), (735, 254), (735, 256), (735, 258), 
              (736, 258), (738, 258), (739, 256), (741, 256), (743, 253), 
              (745, 253), (745, 252), (745, 248), (745, 247), (746, 243), 
              (749, 242), (749, 239), (751, 238), (751, 234), (754, 233), 
              (756, 232), (758, 232), (760, 232), (761, 232), (763, 230), 
              (764, 229), (765, 225), (763, 224), (763, 224), (763, 220), 
              (763, 219)],
             [(698, 324), (700, 325), (700, 327), (701, 329), (703, 330), 
              (704, 329), (705, 327), (705, 329), (706, 332), (706, 333), 
              (708, 334), (709, 335), (710, 337), (711, 339), (714, 342), 
              (716, 343), (716, 344), (718, 349), (718, 351), (719, 354), 
              (720, 356), (721, 357), (725, 358), (725, 361), (728, 366), 
              (729, 369), (728, 369), (730, 374), (730, 376), (733, 377), 
              (734, 376), (736, 375), (739, 374), (743, 374), (747, 374), 
              (748, 371), (751, 370), (752, 369), (755, 369), (756, 369), 
              (757, 367), (758, 365), (761, 364), (765, 364), (766, 364), 
              (767, 361), (768, 360), (770, 359), (771, 356), (771, 355), 
              (773, 355), (775, 352), (776, 352), (776, 350), (776, 348), 
              (776, 346), (775, 346), (772, 345), (770, 345), (770, 342), 
              (767, 342), (766, 340), (767, 336), (765, 337), (765, 340), 
              (762, 340), (761, 341), (758, 341), (756, 341), (755, 342), 
              (753, 340), (753, 337), (752, 337), (751, 335), (747, 333), 
              (746, 332), (743, 327), (742, 325), (743, 323), (744, 323), 
              (744, 322), (745, 322), (746, 323), (749, 323), (750, 325), 
              (750, 326), (752, 328), (754, 328), (754, 330), (756, 332), 
              (759, 333), (759, 333), (760, 335), (761, 335), (764, 335), 
              (765, 333), (766, 332), (767, 332), (769, 332), (770, 332), 
              (770, 334), (770, 336), (771, 336), (771, 337), (774, 337), 
              (775, 337), (776, 337), (777, 337), (781, 338), (782, 339), 
              (785, 339), (789, 338), (790, 337), (795, 337), (797, 338), 
              (796, 336), (794, 333), (791, 332), (791, 328), (791, 328), 
              (791, 327), (790, 326), (789, 324), (789, 322), (790, 321), 
              (790, 319), (791, 319), (794, 318), (792, 314), (791, 313), 
              (791, 311), (790, 311), (790, 308), (790, 306), (790, 304), 
              (791, 303), (792, 301), (792, 301), (792, 298), (792, 296), 
              (792, 296), (791, 296), (790, 294), (787, 293), (785, 293), 
              (783, 291), (782, 289), (782, 286), (782, 286), (782, 283), 
              (781, 283), (780, 283), (777, 282), (777, 281), (775, 279), 
              (773, 278), (770, 276), (767, 274), (766, 274), (765, 276), 
              (762, 276), (761, 277), (758, 277), (757, 277), (755, 278), 
              (752, 278), (750, 278), (750, 279), (747, 281), (746, 281), 
              (745, 282), (742, 281), (741, 281), (740, 278), (735, 278), 
              (733, 277), (730, 277), (728, 277), (725, 276), (725, 277), 
              (725, 279), (722, 282), (720, 282), (720, 283), (716, 283), 
              (712, 283), (711, 283), (710, 282), (707, 281), (705, 281), 
              (705, 281), (698, 279), (697, 282), (695, 282), (692, 283), 
              (690, 283), (687, 284), (686, 286), (682, 286), (681, 286), 
              (680, 288), (682, 291), (682, 293), (683, 296), (683, 297), 
              (683, 298), (685, 299), (688, 301), (690, 299), (692, 298), 
              (695, 299), (698, 301), (700, 302), (702, 299), (705, 299), 
              (710, 299), (710, 301), (710, 303), (708, 306), (708, 308), 
              (706, 308), (706, 311), (705, 313), (705, 316), (705, 317), 
              (703, 317), (702, 317), (701, 317)],
             [(796, 340), (796, 336), (795, 335), (793, 333), (792, 330), 
              (792, 327), (792, 326), (795, 325), (795, 321), (796, 320), 
              (800, 320), (800, 318), (802, 317), (802, 316), (805, 315), 
              (806, 315), (809, 314), (811, 314), (814, 317), (815, 319), 
              (816, 322), (819, 322), (821, 322), (825, 322), (829, 319), 
              (830, 318), (833, 317), (837, 317), (837, 317), (839, 315), 
              (842, 314), (844, 313), (847, 313), (847, 317), (847, 321), 
              (849, 323), (849, 324), (849, 325), (850, 326), (852, 329), 
              (855, 328), (857, 325), (858, 326), (858, 330), (859, 334), 
              (861, 336), (863, 338), (863, 341), (863, 341), (863, 344), 
              (863, 347), (863, 348), (862, 348), (860, 351), (857, 351), 
              (857, 352), (857, 353), (857, 353), (855, 354), (853, 356), 
              (850, 357), (849, 358), (848, 359), (848, 361), (847, 363), 
              (844, 364), (840, 364), (839, 367), (837, 367), (835, 372), 
              (835, 374), (835, 377), (834, 379), (834, 382), (834, 384), 
              (832, 386), (832, 387), (829, 391), (828, 387), (827, 385), 
              (826, 384), (824, 381), (822, 380), (821, 378), (821, 378), 
              (819, 374), (819, 373), (817, 369), (817, 368), (817, 365), 
              (817, 363), (816, 363), (815, 360), (815, 359), (815, 356), 
              (815, 355), (815, 353), (812, 352), (812, 353), (812, 353), 
              (809, 353), (808, 352), (807, 352), (806, 349), (804, 348), 
              (804, 344), (801, 344), (801, 343), (801, 342), (799, 342), 
              (799, 340), (798, 339)],
             [(869, 348), (871, 347), (873, 344), (876, 344), (880, 344), 
              (880, 344), (883, 344), (885, 344), (886, 342), (888, 342), 
              (889, 340), (893, 340), (894, 339), (894, 337), (896, 333), 
              (898, 333), (901, 334), (904, 334), (905, 334), (906, 337), 
              (905, 339), (909, 342), (912, 343), (914, 346), (917, 349), 
              (917, 349), (919, 351), (917, 352), (917, 355), (915, 356), 
              (912, 356), (912, 360), (912, 362), (912, 364), (912, 365), 
              (914, 365), (915, 366), (919, 369), (921, 371), (922, 374), 
              (922, 378), (921, 379), (921, 383), (919, 383), (916, 385), 
              (916, 388), (912, 389), (911, 390), (911, 384), (907, 383), 
              (904, 382), (902, 378), (901, 378), (899, 377), (897, 378), 
              (896, 381), (896, 383), (895, 386), (892, 387), (892, 388), 
              (895, 391), (895, 393), (897, 393), (898, 395), (900, 397), 
              (902, 400), (903, 402), (904, 404), (906, 410), (907, 413), 
              (902, 410), (901, 408), (899, 406), (899, 403), (898, 401), 
              (897, 398), (894, 398), (893, 393), (892, 391), (891, 388), 
              (891, 385), (891, 380), (891, 379), (892, 375), (889, 374), 
              (889, 369), (889, 366), (888, 365), (886, 365), (884, 369), 
              (883, 369), (879, 369), (879, 365), (879, 364), (879, 361), 
              (876, 360), (876, 356), (874, 355), (873, 354), (872, 351)],
             [(860, 350), (862, 349), (862, 345), (862, 344), (863, 344), 
              (863, 342), (863, 340), (863, 340), (863, 337), (862, 335), 
              (860, 334), (860, 331), (860, 329), (860, 329), (858, 327), 
              (857, 326), (855, 326), (853, 326), (850, 327), (849, 324), 
              (849, 323), (849, 322), (849, 321), (849, 319), (849, 318), 
              (849, 317), (849, 314), (845, 313), (844, 315), (843, 315), 
              (840, 318), (837, 319), (834, 319), (832, 320), (832, 319), 
              (830, 319), (832, 317), (830, 314), (830, 312), (829, 309), 
              (829, 308), (828, 305), (828, 304), (829, 304), (831, 304), 
              (832, 304), (834, 304), (836, 303), (836, 301), (837, 300), 
              (838, 299), (838, 296), (838, 294), (837, 293), (837, 291), 
              (839, 290), (841, 288), (841, 288), (844, 288), (847, 288), 
              (848, 288), (851, 286), (853, 285), (856, 284), (857, 281), 
              (858, 280), (862, 278), (863, 275), (863, 273), (867, 269), 
              (870, 265), (873, 265), (877, 265), (880, 266), (882, 266), 
              (885, 268), (888, 268), (890, 270), (892, 273), (895, 274), 
              (897, 275), (898, 277), (900, 277), (903, 277), (906, 278), 
              (907, 280), (910, 280), (912, 280), (913, 280), (917, 279), 
              (921, 279), (924, 279), (926, 279), (926, 281), (926, 284), 
              (928, 286), (933, 286), (936, 286), (939, 288), (941, 289), 
              (944, 291), (948, 292), (948, 293), (948, 296), (949, 297), 
              (953, 301), (953, 302), (954, 304), (954, 307), (956, 310), 
              (956, 312), (956, 314), (957, 316), (957, 319), (957, 322), 
              (956, 325), (956, 328), (955, 331), (954, 335), (952, 335), 
              (952, 338), (948, 340), (948, 344), (945, 345), (941, 348), 
              (940, 348), (938, 348), (937, 348), (934, 348), (929, 350), 
              (928, 351), (926, 351), (924, 351), (920, 351), (919, 350), 
              (917, 347), (915, 346), (914, 346), (911, 345), (910, 343), 
              (908, 341), (907, 340), (907, 338), (906, 338), (905, 337), 
              (905, 336), (907, 334), (907, 333), (903, 334), (900, 335), 
              (898, 334), (898, 334), (896, 338), (894, 339), (892, 342), 
              (889, 343), (886, 345), (884, 345), (881, 345), (876, 343), 
              (875, 345), (872, 347), (872, 347), (870, 348), (869, 350), 
              (868, 350), (864, 351)],
             [(953, 98), (953, 100), (954, 103), (953, 105), (951, 105), 
              (951, 109), (952, 113), (951, 115), (951, 118), (949, 120), 
              (948, 120), (947, 120), (945, 121), (944, 123), (943, 126), 
              (943, 128), (947, 129), (947, 131), (945, 133), (945, 139), 
              (944, 139), (944, 142), (942, 142), (942, 141), (940, 139), 
              (938, 139), (935, 141), (935, 146), (935, 149), (934, 153), 
              (934, 157), (934, 158), (934, 161), (933, 165), (935, 167), 
              (935, 171), (934, 175), (933, 175), (932, 177), (929, 177), 
              (927, 177), (927, 180), (928, 182), (929, 182), (930, 185), 
              (928, 186), (928, 191), (927, 192), (927, 195), (929, 195), 
              (929, 196), (932, 198), (930, 200), (928, 201), (928, 203), 
              (926, 204), (925, 206), (922, 208), (921, 211), (920, 212), 
              (918, 213), (915, 213), (911, 215), (911, 217), (911, 220), 
              (911, 220), (910, 221), (908, 222), (907, 225), (907, 225), 
              (906, 228), (906, 231), (906, 231), (904, 232), (906, 235), 
              (906, 236), (906, 239), (904, 241), (904, 244), (903, 244), 
              (903, 246), (902, 249), (902, 251), (898, 254), (897, 255), 
              (895, 260), (895, 262), (895, 264), (895, 268), (895, 270), 
              (895, 272), (892, 270), (890, 269), (887, 265), (886, 265), 
              (883, 264), (881, 264), (880, 264), (878, 264), (877, 264), 
              (876, 264), (874, 264), (872, 264), (871, 265), (871, 267), 
              (869, 267), (869, 267), (868, 265), (868, 264), (866, 262), 
              (866, 260), (865, 257), (865, 254), (865, 251), (866, 248), 
              (866, 246), (865, 243), (865, 240), (865, 238), (866, 235), 
              (866, 235), (866, 233), (864, 233), (864, 231), (863, 230), 
              (860, 228), (860, 226), (856, 228), (856, 225), (854, 225), 
              (851, 225), (849, 224), (847, 223), (848, 220), (848, 219), 
              (847, 218), (847, 214), (848, 213), (848, 211), (849, 211), 
              (851, 209), (852, 207), (853, 205), (852, 202), (851, 201), 
              (851, 200), (852, 200), (853, 198), (852, 198), (851, 196), 
              (848, 196), (847, 193), (844, 195), (844, 193), (840, 192), 
              (839, 191), (839, 190), (839, 190), (837, 189), (835, 188), 
              (835, 184), (835, 183), (834, 179), (833, 178), (833, 175), 
              (835, 175), (837, 174), (837, 173), (837, 169), (838, 168), 
              (839, 168), (840, 168), (842, 165), (839, 164), (838, 163), 
              (837, 158), (834, 159), (833, 160), (832, 160), (831, 160), 
              (829, 156), (829, 154), (829, 150), (829, 147), (831, 142), 
              (829, 138), (829, 136), (829, 133), (828, 133), (823, 132), 
              (822, 132), (819, 131), (818, 126), (819, 126), (820, 122), 
              (819, 117), (818, 116), (818, 112), (818, 112), (818, 109), 
              (820, 108), (821, 104), (821, 99), (823, 107), (823, 110), 
              (823, 112), (825, 109), (828, 109), (828, 108), (829, 106), 
              (831, 105), (834, 103), (836, 103), (838, 107), (839, 108), 
              (840, 108), (841, 109), (844, 110), (845, 109), (845, 105), 
              (843, 105), (840, 103), (840, 98), (839, 96), (839, 95), 
              (839, 91), (843, 91), (844, 91), (847, 91), (849, 89), 
              (851, 89), (856, 86), (856, 82), (856, 82), (857, 80), 
              (858, 78), (859, 76), (861, 75), (864, 74), (866, 72), 
              (866, 72), (867, 69), (870, 68), (872, 65), (875, 64), 
              (877, 64), (881, 64), (882, 67), (885, 67), (887, 62), 
              (890, 62), (891, 63), (892, 62), (896, 59), (899, 57), 
              (899, 53), (900, 50), (901, 50), (904, 47), (904, 44), 
              (906, 44), (909, 45), (911, 47), (909, 48), (909, 50), 
              (909, 52), (912, 52), (913, 52), (916, 53), (918, 54), 
              (918, 57), (923, 55), (928, 55), (928, 56), (929, 57), 
              (930, 57), (931, 59), (932, 62), (932, 64), (933, 66), 
              (933, 69), (934, 71), (934, 74), (932, 76), (929, 77), 
              (928, 79), (926, 81), (924, 83), (923, 84), (921, 86), 
              (918, 89), (917, 93), (917, 93), (915, 96), (911, 96), 
              (909, 98), (913, 98), (915, 98), (918, 98), (921, 96), 
              (923, 94), (928, 93), (930, 92), (934, 92), (934, 95), 
              (935, 93), (938, 92), (939, 92), (940, 92), (943, 92), 
              (944, 90), (945, 93), (948, 93), (949, 94), (949, 95), 
              (950, 98)],
             [(894, 273), (894, 274), (897, 275), (899, 277), (903, 278), 
              (905, 278), (907, 279), (908, 279), (912, 280), (914, 280), 
              (917, 279), (918, 279), (919, 277), (923, 275), (925, 275), 
              (927, 277), (927, 281), (927, 283), (928, 286), (929, 286), 
              (934, 286), (935, 286), (937, 286), (938, 286), (939, 289), 
              (942, 291), (945, 292), (948, 291), (952, 291), (953, 288), 
              (954, 288), (957, 284), (961, 284), (961, 287), (959, 290), 
              (958, 291), (961, 291), (963, 291), (967, 291), (971, 291), 
              (971, 294), (971, 294), (971, 296), (973, 297), (974, 301), 
              (973, 303), (971, 306), (974, 306), (978, 306), (981, 305), 
              (981, 301), (981, 296), (979, 294), (978, 293), (976, 291), 
              (976, 290), (976, 288), (978, 286), (981, 286), (982, 283), 
              (982, 280), (984, 276), (987, 276), (988, 274), (986, 271), 
              (984, 270), (982, 270), (981, 268), (981, 261), (979, 260), 
              (981, 258), (982, 253), (982, 251), (979, 248), (978, 246), 
              (978, 244), (977, 244), (977, 241), (977, 239), (976, 235), 
              (973, 232), (971, 230), (969, 231), (969, 232), (967, 232), 
              (965, 232), (963, 232), (962, 234), (960, 235), (958, 237), 
              (953, 237), (952, 239), (949, 239), (947, 239), (940, 239), 
              (937, 242), (933, 244), (929, 244), (927, 245), (927, 242), 
              (923, 244), (923, 244), (923, 247), (923, 251), (920, 251), 
              (918, 251), (918, 252), (919, 255), (919, 255), (917, 255), 
              (917, 254), (914, 254), (914, 254), (913, 254), (913, 254), 
              (909, 254), (907, 256), (907, 256), (904, 256), (904, 255), 
              (903, 255), (902, 254), (899, 254), (899, 256), (898, 256), 
              (898, 259), (895, 260), (895, 262), (896, 266), (895, 269)],
             [(900, 254), (899, 251), (900, 249), (901, 246), (903, 245), 
              (903, 244), (905, 242), (905, 240), (905, 239), (905, 236), 
              (907, 235), (907, 234), (905, 234), (904, 231), (904, 229), 
              (905, 226), (907, 225), (908, 220), (909, 219), (911, 216), 
              (911, 215), (911, 215), (913, 214), (914, 212), (916, 212), 
              (919, 212), (921, 212), (921, 209), (922, 206), (924, 202), 
              (926, 200), (927, 199), (927, 197), (930, 197), (930, 196), 
              (927, 195), (927, 192), (928, 191), (928, 187), (928, 186), 
              (928, 183), (930, 182), (928, 181), (928, 180), (927, 178), 
              (927, 177), (928, 176), (931, 175), (932, 175), (933, 173), 
              (937, 173), (937, 177), (938, 177), (940, 180), (941, 180), 
              (942, 182), (945, 184), (945, 184), (947, 184), (945, 181), 
              (946, 179), (947, 179), (950, 179), (952, 177), (952, 177), 
              (953, 177), (954, 178), (958, 179), (959, 182), (962, 182), 
              (964, 183), (967, 183), (968, 184), (969, 185), (971, 185), 
              (972, 187), (975, 187), (978, 188), (980, 189), (983, 191), 
              (983, 192), (983, 193), (985, 195), (985, 198), (985, 202), 
              (984, 203), (983, 205), (979, 205), (978, 207), (977, 207), 
              (974, 207), (972, 208), (972, 208), (970, 210), (968, 210), 
              (967, 213), (964, 217), (963, 218), (962, 218), (962, 221), 
              (962, 222), (962, 223), (965, 225), (967, 227), (968, 228), 
              (970, 231), (971, 232), (970, 232), (968, 232), (966, 232), 
              (965, 232), (964, 232), (958, 234), (958, 236), (958, 236), 
              (957, 236), (954, 238), (952, 238), (949, 238), (948, 238), 
              (946, 239), (945, 239), (942, 241), (940, 243), (937, 245), 
              (935, 245), (931, 246), (930, 246), (928, 245), (927, 244), 
              (924, 243), (923, 243), (923, 245), (923, 247), (923, 249), 
              (923, 250), (921, 250), (920, 250), (918, 251), (918, 254), 
              (917, 254), (914, 254), (914, 252), (912, 254), (907, 256), 
              (904, 259), (902, 257), (900, 255)],
             [(954, 99), (955, 104), (955, 106), (953, 106), (952, 106), 
              (952, 110), (952, 111), (952, 113), (952, 115), (950, 117), 
              (950, 119), (948, 122), (945, 122), (945, 122), (944, 123), 
              (943, 126), (944, 128), (945, 129), (945, 129), (947, 134), 
              (944, 134), (944, 139), (944, 139), (945, 144), (942, 142), 
              (942, 140), (939, 140), (937, 140), (937, 144), (937, 145), 
              (936, 149), (936, 149), (935, 154), (935, 154), (933, 158), 
              (933, 159), (933, 162), (933, 166), (935, 170), (935, 172), 
              (935, 176), (938, 176), (938, 178), (939, 179), (943, 181), 
              (941, 184), (943, 184), (946, 184), (945, 183), (946, 180), 
              (946, 179), (948, 179), (951, 177), (952, 177), (953, 177), 
              (954, 177), (956, 178), (956, 181), (959, 182), (961, 183), 
              (963, 185), (963, 182), (964, 184), (966, 185), (968, 185), 
              (969, 184), (969, 185), (971, 186), (972, 186), (974, 188), 
              (975, 189), (976, 189), (977, 189), (979, 192), (981, 194), 
              (984, 194), (984, 193), (985, 190), (986, 189), (986, 187), 
              (986, 187), (989, 184), (991, 184), (994, 184), (997, 183), 
              (1001, 183), (1004, 185), (1011, 186), (1011, 184), (1015, 181), 
              (1017, 181), (1022, 180), (1024, 180), (1026, 181), (1027, 181), 
              (1030, 180), (1031, 178), (1034, 175), (1034, 173), (1031, 169), 
              (1031, 166), (1033, 163), (1035, 161), (1040, 158), (1042, 158), 
              (1045, 157), (1047, 157), (1047, 153), (1047, 153), (1048, 149), 
              (1050, 148), (1050, 146), (1051, 143), (1052, 142), (1053, 141), 
              (1053, 138), (1053, 137), (1051, 134), (1050, 133), (1050, 131), 
              (1050, 128), (1051, 126), (1050, 124), (1047, 120), (1047, 116), 
              (1047, 113), (1045, 111), (1042, 111), (1038, 109), (1040, 109), 
              (1040, 106), (1040, 105), (1033, 103), (1032, 103), (1030, 100), 
              (1027, 100), (1022, 100), (1018, 98), (1014, 99), (1013, 100), 
              (1011, 103), (1011, 105), (1011, 109), (1012, 109), (1011, 110), 
              (1007, 112), (1007, 112), (1004, 112), (1002, 110), (998, 111), 
              (995, 115), (994, 112), (994, 108), (990, 106), (989, 110), 
              (989, 112), (986, 116), (985, 120), (984, 116), (983, 113), 
              (981, 112), (981, 109), (979, 109), (977, 107), (980, 106), 
              (980, 103), (980, 102), (980, 99), (980, 98), (979, 95), 
              (976, 94), (976, 92), (974, 93), (973, 92), (969, 92), 
              (968, 90), (965, 89), (964, 92), (964, 92), (964, 93), 
              (964, 96), (963, 96), (960, 96), (959, 98), (958, 98), 
              (955, 98)],
             [(985, 309), (988, 308), (990, 304), (994, 304), (995, 304), 
              (996, 306), (999, 306), (1000, 307), (1003, 303), (1003, 299), 
              (1005, 299), (1007, 299), (1008, 298), (1009, 297), (1009, 294), 
              (1012, 292), (1012, 287), (1012, 285), (1012, 282), (1014, 280), 
              (1015, 283), (1017, 284), (1017, 286), (1018, 290), (1018, 291), 
              (1019, 294), (1015, 295), (1015, 297), (1015, 298), (1015, 302), 
              (1015, 304), (1013, 305), (1009, 308), (1006, 307), (1003, 305), 
              (1001, 309), (999, 309), (997, 309), (987, 312), (992, 316), 
              (986, 311)],
             [(1049, 119), (1051, 119), (1052, 118), (1054, 117), (1056, 117), 
              (1058, 117), (1059, 116), (1063, 116), (1066, 118), (1067, 119), 
              (1067, 119), (1070, 121), (1071, 123), (1071, 126), (1070, 128), 
              (1072, 129), (1074, 130), (1076, 131), (1077, 131), (1077, 129), 
              (1079, 129), (1083, 129), (1084, 130), (1085, 131), (1088, 130), 
              (1090, 130), (1094, 126), (1095, 130), (1097, 133), (1099, 134), 
              (1102, 134), (1103, 132), (1103, 129), (1102, 127), (1102, 125), 
              (1104, 125), (1107, 127), (1107, 127), (1109, 127), (1112, 127), 
              (1114, 127), (1118, 127), (1119, 129), (1123, 132), (1125, 132), 
              (1129, 135), (1132, 137), (1135, 139), (1135, 141), (1139, 142), 
              (1140, 144), (1141, 144), (1145, 146), (1146, 149), (1149, 149), 
              (1154, 150), (1155, 152), (1156, 155), (1158, 156), (1158, 159), 
              (1155, 159), (1154, 161), (1151, 164), (1151, 166), (1149, 166), 
              (1144, 164), (1142, 161), (1139, 161), (1136, 157), (1134, 157), 
              (1132, 158), (1130, 160), (1129, 163), (1126, 163), (1126, 165), 
              (1126, 168), (1126, 172), (1125, 173), (1126, 176), (1127, 179), 
              (1127, 181), (1124, 181), (1122, 179), (1118, 179), (1118, 182), 
              (1113, 183), (1113, 186), (1110, 187), (1108, 187), (1105, 189), 
              (1102, 193), (1102, 194), (1099, 196), (1099, 193), (1097, 193), 
              (1096, 193), (1094, 193), (1091, 193), (1089, 193), (1085, 194), 
              (1082, 198), (1081, 201), (1080, 201), (1076, 204), (1076, 207), 
              (1076, 209), (1077, 213), (1077, 217), (1075, 218), (1073, 221), 
              (1072, 223), (1070, 228), (1070, 229), (1068, 231), (1064, 233), 
              (1060, 239), (1060, 238), (1059, 236), (1059, 234), (1059, 230), 
              (1058, 226), (1058, 221), (1058, 218), (1058, 215), (1060, 214), 
              (1062, 210), (1064, 210), (1064, 206), (1068, 205), (1072, 204), 
              (1073, 200), (1075, 198), (1077, 195), (1079, 191), (1080, 193), 
              (1082, 190), (1082, 186), (1084, 183), (1084, 180), (1084, 180), 
              (1083, 181), (1079, 183), (1079, 185), (1077, 186), (1073, 189), 
              (1073, 189), (1073, 190), (1073, 186), (1069, 186), (1064, 186), 
              (1061, 188), (1061, 189), (1059, 189), (1057, 192), (1054, 194), 
              (1054, 197), (1054, 199), (1051, 200), (1051, 202), (1048, 199), 
              (1045, 197), (1042, 198), (1041, 198), (1039, 198), (1034, 199), 
              (1032, 199), (1030, 199), (1025, 198), (1019, 198), (1018, 200), 
              (1014, 203), (1010, 205), (1007, 210), (1006, 211), (1007, 218), 
              (999, 220), (1003, 225), (1008, 229), (1011, 229), (1013, 232), 
              (1013, 235), (1015, 238), (1015, 240), (1015, 242), (1015, 245), 
              (1014, 249), (1012, 253), (1007, 255), (1005, 260), (1003, 265), 
              (1003, 269), (1000, 270), (999, 273), (995, 277), (991, 277), 
              (991, 277), (986, 275), (987, 273), (986, 270), (981, 269), 
              (980, 267), (978, 267), (977, 263), (978, 259), (978, 258), 
              (980, 257), (981, 257), (982, 253), (980, 250), (977, 248), 
              (976, 245), (976, 244), (977, 242), (977, 239), (976, 237), 
              (972, 234), (972, 232), (971, 228), (968, 228), (966, 224), 
              (963, 223), (963, 220), (964, 219), (967, 218), (966, 215), 
              (967, 210), (968, 209), (972, 208), (975, 205), (977, 206), 
              (978, 206), (982, 206), (985, 203), (985, 201), (985, 198), 
              (985, 195), (985, 192), (985, 189), (986, 187), (990, 185), 
              (992, 185), (995, 184), (998, 184), (1002, 183), (1004, 183), 
              (1006, 184), (1010, 184), (1012, 182), (1016, 182), (1019, 179), 
              (1024, 179), (1025, 179), (1028, 182), (1029, 180), (1032, 179), 
              (1034, 174), (1032, 169), (1032, 168), (1033, 165), (1033, 163), 
              (1034, 160), (1037, 159), (1039, 159), (1042, 159), (1044, 160), 
              (1045, 160), (1047, 158), (1047, 154), (1047, 151), (1048, 148), 
              (1049, 145), (1049, 145), (1050, 143), (1052, 140), (1053, 140), 
              (1053, 136), (1052, 134), (1049, 132), (1050, 130), (1052, 128), 
              (1052, 126), (1050, 124), (1049, 120)]],
            [[(882, 402), (884, 406), (885, 406), (887, 407), (888, 411), 
              (889, 411), (890, 412), (892, 414), (894, 414), (894, 416), 
              (895, 417), (895, 420), (895, 420), (897, 423), (899, 425), 
              (899, 426), (899, 426), (901, 427), (902, 429), (903, 431), 
              (906, 434), (908, 434), (910, 434), (911, 434), (912, 435), 
              (912, 436), (913, 437), (916, 437), (918, 439), (918, 439), 
              (920, 439), (922, 439), (926, 440), (928, 441), (931, 441), 
              (935, 441), (937, 441), (941, 442), (945, 444), (949, 445), 
              (954, 444), (951, 439), (949, 439), (946, 439), (944, 437), 
              (941, 436), (935, 436), (932, 436), (930, 436), (929, 436), 
              (927, 435), (931, 426), (934, 425), (935, 425), (936, 426), 
              (936, 426), (937, 427), (937, 427), (939, 427), (940, 427), 
              (941, 427), (942, 424), (944, 422), (945, 420), (946, 419), 
              (946, 419), (946, 418), (946, 413), (946, 413), (948, 413), 
              (950, 413), (949, 409), (948, 408), (946, 404), (949, 403), 
              (950, 399), (949, 399), (948, 397), (948, 397), (946, 396), 
              (943, 397), (943, 399), (941, 401), (938, 402), (936, 404), 
              (933, 404), (932, 406), (927, 408), (927, 409), (926, 409), 
              (923, 409), (922, 412), (922, 414), (924, 416), (924, 420), 
              (924, 422), (927, 422), (927, 422), (929, 424), (932, 425), 
              (928, 436), (927, 436), (925, 436), (925, 437), (921, 436), 
              (919, 436), (918, 434), (915, 432), (913, 432), (913, 434), 
              (911, 432), (911, 427), (913, 426), (913, 424), (911, 422), 
              (910, 422), (909, 422), (908, 421), (905, 421), (904, 419), 
              (903, 417), (903, 415), (899, 413), (896, 412), (895, 411), 
              (894, 409), (893, 409), (890, 408), (890, 405), (889, 403), 
              (886, 403), (885, 402)],
             [(989, 424), (989, 425), (989, 428), (992, 428), (993, 428), 
              (995, 428), (997, 428), (999, 428), (1000, 428), (1003, 432), 
              (1005, 432), (1005, 433), (1007, 435), (1007, 439), (1010, 440), 
              (1013, 442), (1016, 442), (1017, 444), (1018, 445), (1022, 445), 
              (1022, 441), (1022, 440), (1025, 440), (1028, 439), (1030, 439), 
              (1032, 441), (1035, 445), (1036, 448), (1041, 448), (1043, 448), 
              (1043, 445), (1038, 442), (1037, 440), (1036, 439), (1033, 436), 
              (1036, 435), (1029, 431), (1026, 427), (1023, 425), (1013, 424), 
              (1012, 422), (1008, 422), (1006, 421), (1004, 420), (1003, 420), 
              (1003, 422), (1001, 424), (999, 425), (996, 422), (992, 419), 
              (989, 420), (989, 424), (991, 427)],
             [(987, 514), (986, 512), (986, 510), (987, 509), (987, 506), 
              (987, 506), (988, 504), (991, 504), (992, 504), (992, 501), 
              (992, 497), (992, 496), (992, 496), (994, 494), (996, 491), 
              (998, 490), (999, 489), (1002, 488), (1002, 486), (1002, 486), 
              (1001, 484), (999, 483), (998, 482), (998, 478), (998, 476), 
              (998, 473), (997, 472), (997, 468), (997, 465), (997, 464), 
              (998, 463), (998, 463), (998, 461), (1001, 458), (1001, 456), 
              (1001, 453), (999, 453), (998, 452), (997, 451), (996, 451), 
              (992, 448), (989, 448), (988, 451), (983, 452), (982, 453), 
              (982, 457), (981, 458), (982, 461), (979, 461), (977, 461), 
              (977, 458), (976, 457), (973, 456), (972, 458), (968, 461), 
              (966, 463), (966, 466), (966, 467), (962, 468), (962, 468), 
              (958, 471), (956, 472), (953, 473), (953, 476), (948, 477), 
              (943, 478), (942, 478), (939, 481), (938, 483), (935, 486), 
              (935, 488), (935, 492), (935, 494), (934, 496), (935, 499), 
              (938, 503), (939, 504), (939, 507), (940, 513), (942, 518), 
              (939, 519), (939, 523), (944, 524), (947, 524), (949, 524), 
              (950, 522), (954, 521), (959, 520), (963, 522), (964, 521), 
              (965, 516), (968, 516), (971, 515), (976, 515), (978, 515), 
              (978, 514), (981, 512), (983, 512)],
             [(987, 514), (986, 511), (987, 511), (987, 507), (988, 507), 
              (989, 506), (991, 506), (993, 506), (993, 502), (993, 501), 
              (993, 499), (993, 498), (993, 496), (993, 494), (993, 493), 
              (994, 493), (994, 492), (996, 491), (996, 491), (996, 491), 
              (997, 491), (999, 489), (1001, 489), (1003, 488), (1003, 485), 
              (1001, 485), (999, 485), (999, 481), (999, 479), (999, 475), 
              (998, 474), (997, 470), (997, 468), (998, 465), (999, 464), 
              (999, 461), (1002, 464), (1003, 465), (1004, 465), (1007, 466), 
              (1009, 468), (1009, 469), (1014, 470), (1015, 469), (1015, 468), 
              (1017, 465), (1017, 464), (1017, 462), (1017, 459), (1018, 455), 
              (1019, 454), (1019, 450), (1022, 450), (1023, 454), (1023, 455), 
              (1023, 459), (1025, 462), (1027, 467), (1029, 469), (1030, 470), 
              (1030, 472), (1033, 475), (1035, 477), (1036, 479), (1039, 482), 
              (1041, 487), (1045, 489), (1046, 490), (1049, 497), (1050, 504), 
              (1051, 507), (1051, 510), (1050, 512), (1049, 517), (1046, 519), 
              (1045, 520), (1044, 524), (1042, 529), (1041, 534), (1037, 535), 
              (1036, 535), (1035, 539), (1031, 540), (1030, 537), (1028, 535), 
              (1026, 538), (1022, 539), (1022, 538), (1017, 538), (1017, 535), 
              (1013, 534), (1013, 529), (1009, 528), (1006, 527), (1001, 527), 
              (998, 524), (998, 521), (997, 519), (997, 517), (994, 516), 
              (991, 515), (988, 514), (987, 512)]]]


# CENTERS contains the same indexing as POLYGONS. Each center is the approximate
# center of each polygon, and is used to display the owner and number of armies
# present

CENTERS = [[(179, 159), (272, 157), (481, 83), (272, 224), (336, 232),
            (399, 227), (278, 276), (348, 296), (297, 329)],
           [(400, 403), (452, 458), (391, 468), (406, 533)],
           [(601.5, 357), (673.5, 340), (706.5, 396), (656.5, 426),
            (669.5, 485), (739.5, 472)],
           [(573, 139), (641, 101), (717, 215), (663, 266), (638, 235), 
            (551, 220), (553, 271)],
           [(807, 195), (790, 260), (738, 309), (832, 347), (902, 363), 
            (897, 309), (883, 171), (949, 264), (940, 216), (992, 152), 
            (1043, 308), (1092, 157)],
           [(878, 456), (1093, 409), (921, 549), (1088, 537)]]
           
           
            
           

# Similar to the structure of POLYGONS, ADJACENT contains a list of the names of
# each country that is adjacent to each other country. 

ADJACENT = [[["Kamchatka", "Alberta", "Northwest Territory"],
             ["Alaska", "Ontario", "Alberta", "Greenland"],
             ["Northwest Territory", "Ontario", "Quebec", "Iceland"],
             ["Alaska", "Northwest Territory", "Ontario",
              "Western United States"],
             ["Northwest Territory", "Greenland", "Quebec", "Alberta",
              "Eastern United States", "Western United States"],
             ["Greenland", "Ontario", "Eastern United States"],
             ["Alberta", "Ontario", "Eastern United States", "Central America"],
             ["Quebec", "Ontario", "Western United States", "Central America"],
             ["Western United States", "Eastern United States", "Venezuala"]],
            [["Central America", "Brazil", "Peru"],
             ["Venezuala", "Peru", "Argentina"],
             ["Venezuala", "Brazil", "Argentian"],
             ["Brazil", "Peru"]],
            [["Brazil", "Egypt", "East Africa", "Congo"],
             ["North Africa", "East Africa", "Middle East", "Southern Europe"],
             ["Egypt", "North Africa", "Congo", "South Africa", "Madagascar",
              "Middle East"],
             ["North Africa", "East Africa", "South Africa"],
             ["Congo", "East Africa", "Madagascar"],
             ["South Africa", "East Africa"]],
            [["Greenland", "Scandinavia", "Great Britain"],
             ["Iceland", "Great Britain", "Northern Europe", "Ukraine"],
             ["Scandinavia", "Ural", "Afghanistan", "Southern Europe",
              "Northern Europe"],
             ["Ukraine", "Northern Europe", "Western Europe", "North Africa",
              "Egypt", "Middle East"],
             ["Scandinavia", "Ukraine", "Southern Europe", "Western Europe",
              "Great Britain"],
             ["Iceland", "Scandinavia", "Northern Europe", "Western Europe"],
             ["North Africa", "Southern Europe", "Northern Europe",
              "Great Britain"]],
            [["Ukraine", "Afghanistan", "China", "Siberia"],
             ["Ural", "Ukraine", "Middle East", "India", "China"],
             ["Afghanistan", "India", "Southern Europe", "Egypt",
              "East Africa"],
             ["Middle East", "Afghanistan", "China"],
             ["Indonesia", "China", "New Guinea"],
             ["Siam", "India", "Afghanistan", "Ural", "Siberia", "Mongolia"],
             ["Ural", "China", "Mongolia", "Irkutsk", "Yakutsk"],
             ["China", "Siberia", "Irkutsk", "Kamchatka"],
             ["Mongolia", "Siberia", "Yakutsk", "Kamchatka"],
             ["Siberia", "Irkutsk", "Kamchatka"],
             ["Mongolia", "Kamchatka"],
             ["Yakutsk", "Irkutsk", "Mongolia", "Japan", "Alaska"]],
            [["Siam", "New Guinea", "Western Australia"],
             ["Indonesia", "Eastern Australia", "Western Australia"],
             ["Eastern Australia", "New Guinea", "Indonesia"],
             ["Western Australia", "New Guinea"]]]

class Die:
    """ Creates a die that can be rolled to retrieve a random value between 1
        and 6. """
    SIDES = 6
    POSITIONS = [None,
                 [(0, 0), None, None, None, None, None],
                 [(-.25, .25), (.25, -.25), None, None, None, None],
                 [(-.25, .25), (0, 0), (.25, -.25), None, None, None],
                 [(-.25, -.25), (-.25, .25), (.25, -.25), 
                  (.25, .25), None, None],
                 [(-.25, -.25), (-.25, .25), (.25, -.25), 
                  (.25, .25), (0, 0), None],                  
                 [(-.25, -.25), (-.25, .25), (.25, -.25), 
                  (.25, .25), (-.25, 0), (.25, 0)]]
                 
    def __init__(self, board, width=25, center=(200,200), bgcolor='white',
                 fgcolor='black'):
        """ Constructor for the Die class. """
        self._value = 6
        self._square = Rectangle(width, width, center)
        self._square.setFillColor(bgcolor)
        self._square.setDepth(20)
        self._width = width
        self._center = center
        self._pips = []
        self._board = board
        for _ in range(Die.SIDES):
            pip = Circle(width / 15, center)
            pip.setFillColor(fgcolor)
            pip.setDepth(20)
            self._pips.append(pip)
        
    def addTo(self, win):
        """ Adds the die to the window. """
        win.add(self._square)
        for pip in self._pips:
            win.add(pip)
    
    def roll(self):
        """ changes the value of this die to a random number between 1 and 
            the number of sides of a die. """
        self._value = random.randrange(Die.SIDES) + 1
        self._update()
    
    def getValue(self):
        """ return the current value of this die. """
        return self._value
        
    def _update(self):
        """ private method: make this die's appearance match its value. """
        positions = Die.POSITIONS[self._value]
        for i in range(len(positions)):
            if positions[i] == None:
                self._pips[i].setDepth(25)
            else:
                self._pips[i].setDepth(15)
                cx, cy = self._center  # center of the die.
                dx = positions[i][0] * self._width
                dy = positions[i][1] * self._width  
                self._pips[i].moveTo((cx + dx, cy + dy))
                
class Country(EventHandler):
    """ A pseudographical object that reports back to the board. The country
        contains its owner and armies. """
    def __init__(self, board, name, continent, polygon, owner, adjacent, color,
                 center):
        """ Constructor for the Country class. """
        EventHandler.__init__(self)
        
        self._name = name
        self._continent = continent
        self._center = center
        self._border = Polygon(polygon)
        self._border.setFillColor(color)
        self._border.addHandler(self)
        self._owner = owner
        self._adjacent = adjacent
        self._board = board
        self._originalColor = color
        
        self._selected = False
        self._selectable = False
        
        self._armies = 0
        
        cx, cy = center
        self._text1 = Text("Owner: " + self._owner, center)
        self._text2 = Text("Armies: " + str(self._armies), (cx, cy + 15))
        self._text1.setDepth(2)
        self._text2.setDepth(2)
        self._text1.addHandler(self)
        self._text2.addHandler(self)
        
        self._phase2Available = True
        
    def handleMouseRelease(self, event):
        """ Selects or deselects the country. Select reports back to the board
            that the country was selected. """
        if self._selectable:
            if self._selected:
                self.deselect()
            else:
                self.select()
        
    def addTo(self, win):
        """ Adds the country to the board. """
        win.add(self._border)
        win.add(self._text1)
        win.add(self._text2)
    
    def getName(self):
        """ Retrieves the name of the country. """
        return self._name
        
    def getContinent(self):
        """ Retrieves the continent the country is located on. """
        return self._continent
        
    def getOwner(self):
        """ Retrieves the owner of the country. """
        return self._owner
        
    def changeOwner(self, newOwner):
        """ Changes the owner of the country. """
        self._owner = newOwner
        
    def addArmy(self):
        """ Adds one army to the country. """
        self._armies += 1
        
    def subtractArmy(self):
        """ Removes one army from the country. """
        self._armies -= 1
    
    def getArmies(self):
        """ Retrieves the number of armies. """
        return self._armies
        
    def getSelected(self):
        """ Returns if the country is selected. """
        return self._selected
        
    def select(self):
        """ Selects the country, and reports the selection to the board. """
        self._selected = True
        self._border.setBorderColor("gold")
        self._border.setDepth(5)
        self._board.countrySelect(self)
        
    def deselect(self):
        """ Deselects the country. """
        self._selected = False
        self._border.setBorderColor("black")
        self._border.setDepth(10)
        
    def getAdjacent(self):
        """ Returns the list of the names of all adjacent countries. """
        return self._adjacent
        
    def highlight(self):
        """ Highlights the country, and allows it to be selected. """
        self._selectable = True
        self._border.setFillColor("orange")
        
    def unHighlight(self):
        """ Unhighlights the country. """
        self._selectable = False
        self._border.setFillColor(self._originalColor)
        
    def updateText(self, win):
        """ Updates the country's text to match any changes. """
        cx, cy = self._center
        win.remove(self._text1)
        win.remove(self._text2)
        self._text1 = Text("Owner: " + str(self._owner), self._center)
        self._text2 = Text("Armies: " + str(self._armies), (cx, cy + 15))
        self._text1.setDepth(2)
        self._text2.setDepth(2)
        win.add(self._text1)
        win.add(self._text2)
        
    def getAvailable(self):
        """ Returns whether or not the country is available for phase 2 part
            2. """
        return self._phase2Available
        
    def notAvailable(self):
        """ Makes the country unavailable for phase 2 part 2"""
        self._phase2Available = False
        
    def makeAvailable(self):
        """ Makes the country available"""
        self._phase2Available = True
        
class Board:
    """ The board for Risk. """
    def __init__(self, game, continents, countries, polygons, adjacent,
                 centers, colors):
        """ Constructor for the board class. """
        self._countries = []
        for i in range(len(continents)):
            for x in range(len(countries[i])):
                country = Country(self, countries[i][x], continents[i],
                                  polygons[i][x], "Player", adjacent[i][x],
                                  colors[i], centers[i][x])
                self._countries.append(country)
                
        self._game = game
        
        self._ocean = Rectangle(1288, 620, (644, 310))
        self._ocean.setFillColor("#1E90FF")
        self._ocean.setDepth(100)
    
    def addTo(self, win):
        """ Adds all the countries to the board. """
        for country in self._countries:
            country.addTo(win)
        win.add(self._ocean)
        
    def countrySelect(self, country):
        """ Passes whatever country was selected to the game. """
        self._game.reportCountry(country)
        
    def assignCountries(self, numPlayers):
        """ Assigns each country to a random player. """
        player = 0
        done = 0
        while done != len(self._countries):
            i = random.randrange(len(self._countries))
            if self._countries[i].getOwner() == "Player":
                self._countries[i].changeOwner(player)
                self._countries[i].addArmy()
                player += 1
                player %= numPlayers
                done += 1
                
    def getCountries(self):
        """ Returns a list of all the countries. """
        return self._countries
        
    def unHighlightAll(self):
        """ Unhighlights all the countries. """
        for country in self._countries:
            country.unHighlight()
    
    def deSelectAll(self):
        """ Deselects all the countries. """
        for country in self._countries:
            country.deselect()
            
    def checkContControl(self, continent, owner):
        """ Checks to see if a single player controls a continent. Returns True
            if one player controls the continent. Otherwise, returns False. """
        countries = []
        for country in self._countries:
            if continent == country.getContinent():
                countries.append(country)
        total = 0
        for country in countries:
            if country.getOwner() == owner:
                total += 1
        return total == len(countries)
        
    def availableAll(self):
        """ Sets all the countries to be available. """
        for country in self._countries:
            country.makeAvailable()
        
class Game:
    """ The controller for all the pseudographical objects. """
    def __init__(self, players, win, continents, values):
        self._continents = continents
        self._values = values
        self._board = Board(self, CONTINENTS, COUNTRIES, POLYGONS, ADJACENT,
                            CENTERS, COLORS)
        self._win = win
        self._players = []
        for i in range(int(players)):
            player = Player(i, self, self._board)
            self._players.append(player)
        
        self._yes = Yes(self, win)
        self._no = No(self, win)
           
        self._playerTurn = -1
        
        self._phase = 0
        
        self._armies = 0
        
        self._countryselect = None
        
        self._prompts = Prompts(win)
        self._prompts.hideAll()
        
    def changeTurn(self):
        """ Changes the player turn"""
        self._playerTurn += 1
        self._playerTurn %= len(self._players)
        self._board.unHighlightAll()
        self._board.deSelectAll()
            
        
    def getTurn(self):
        """ Returns the current turn. """
        return self._playerTurn
        
    def changePhase(self):
        """ Changes the current phase. There are three phases per player
            turn. """
        self._board.unHighlightAll()
        self._board.deSelectAll()
        self._countryselect = None
        self._phase += 1
        self._phase %= 3
        if self._phase == 0:
            self.changeTurn()
            self._prompts.phase0()
        if self._phase == 1:
            self._prompts.phase1_1()
        if self._phase == 2:
            self._prompts.phase2_1()
        
    def getPhase(self):
        """ Returns the current phase. """
        return self._phase
        
    def setUp(self):
        """ Sets the board up for the game to be played. """
        self._board.addTo(self._win)
        self._board.assignCountries(len(self._players))
        self.changeTurn()
        for country in self._board.getCountries():
            country.updateText(self._win)
        
    def reportCountry(self, country):
        """ Tells the game what country was selected. Does different things
            depending on the phase. """
        if self._phase == 0:
            self.phase0(country)
                
        if self._phase == 1:
            if self._countryselect == None:
                self.phase1part1(country)
                self._prompts.phase1_3()
            else:
                self.phase1part2(country)
                
        if self._phase == 2:
            if self._countryselect == None:
                self._board.unHighlightAll()
                self.phase2part1(country)
                self._countryselect = country
                self._prompts.phase2_3()
            else:
                self.phase2part2(country)
                self._board.availableAll()
    
    def phase0(self, country):
        """ The first phase of every turn. Each click adds one army to the
            selected country. Each player gets armies equivalent to the number
            of countries owned and the continents controlled. """
        country.deselect()
        if self._armies != 0:
            country.addArmy()
            self._armies -= 1
            country.updateText(self._win)
            
    def phase1part1(self, country):
        """ The first part of phase 1. Selects an initial country to attack from
            and highlights any adjacent enemy countries. """
        self._board.unHighlightAll()
        adjacent = []
        for other in country.getAdjacent():
            for count in self._board.getCountries():
                if count.getName() == other:
                    adjacent.append(count)
        for other in adjacent:
            if other.getOwner() != self._playerTurn:
                other.highlight()
        self._countryselect = country
        
    def phase1part2(self, country):
        """ The second part of phase 1. Selects an enemy to attack, and rolls
            dice to determine a winner. """
        attackers = int(input("How many armies would you like to attack\
                              with (1-3)?"))
        while attackers == self._countryselect.getArmies() or \
              attackers > 3:
            attackers = int(input("How many armies would you like to\
                                  attack with (1-3)?"))
        
        # Gets a die roll for each attacking and defending army, and
        # stores them in lists
        
        att_rolls = []
        for _ in range(int(attackers)):
            die = Die(self._board)
            die.roll()
            att_rolls.append(die.getValue())
        def_rolls = []
        defenders = 2
        if country.getArmies() < defenders:
            defenders = country.getArmies()
        for _ in range(defenders):
            die = Die(self._board)
            die.roll()
            def_rolls.append(die.getValue())
        
        # Uses the highest numbers against one another
        
        while def_rolls != [] and att_rolls != []:
            defender = getHighest(def_rolls)
            attacker = getHighest(att_rolls)
            def_rolls.remove(defender)
            att_rolls.remove(attacker)
            if defender >= attacker:
                country.subtractArmy()
            else:
                self._countryselect.subtractArmy()
        country.updateText(self._win)
        self._countryselect.updateText(self._win)
                
        # Determines if the defending country has been conquered, and
        # moves the attackers to the new country. Also allows movement
        # of more armies from the attacking country to the new country
        
        if country.getArmies() == 0:
            country.changeOwner(self._countryselect.getOwner())
            for _ in range(len(att_rolls) + 1):
                country.addArmy()
                self._countryselect.subtractArmy()
            move = input("Would you like to move more armies? \
                         (type \"yes\" or \"no\")")
            if move == "yes":
                total = int(input("How many would you like to move?"))
                while total >= self._countryselect.getArmies():
                    total = int(input("How many would you like to \
                                      move?"))
                for _ in range(total):
                    country.addArmy()
                    self._countryselect.subtractArmy()
        country.updateText(self._win)
        self._countryselect.updateText(self._win)
        
        # Checks to see if any player has lost the game and, if so,
        # removes them from self._players
        
        for player in self._players:
            if player.checkLoss():
                player.removeFrom(self._players)
                
        # Checks to see if the current player has won. If so, calls the win
        # function.
        
        if self._players[self._playerTurn].checkVictory():
            self._players[self._playerTurn].victory()
        
        # Resets the board for another attack
        
        self._countryselect = None
        self.initPhaseOne()
                        
    def phase2part1(self, country):
        """ The first step of phase 2. This selects the country that you would
            like to move armies from. amd highlights where you can move them
            to. """
        country.notAvailable()
        adjacent = []
        for other in country.getAdjacent():
            for count in self._board.getCountries():
                if count.getName() == other:
                    adjacent.append(count)
        for other in adjacent:
            if other.getOwner() == self._playerTurn:
                if other.getAvailable():
                    other.highlight()
                    self.phase2part1(other)
                
    def phase2part2(self, country):
        """ The second part of phase 2. Moves x number of armies from one
            country to another. """
        move = int(input("How many armies would you like to move?"))
        while move >= self._countryselect.getArmies() or move <= 0:
            move = int(input("How many armies would you like to move?"))
        for _ in range(move):
            self._countryselect.subtractArmy()
            country.addArmy()
        country.updateText(self._win)
        self._countryselect.updateText(self._win)
        self._board.deSelectAll()
        self._board.unHighlightAll()
        
    def initPhaseZero(self):
        """ Sets up phase 0. """
        countries = 0
        for country in self._board.getCountries():
            if country.getOwner() == self._playerTurn:
                country.highlight()
                countries += 1
        self._armies = 3
        if countries // 3 > self._armies:
            self._armies = countries // 3
        for i in range(len(self._continents)):
            if self._board.checkContControl(self._continents[i],
                                            self._playerTurn):
                self._armies += self._values[i]
        
    
    def initPhaseOne(self):
        """ Sets up phase 1. """
        self._board.unHighlightAll()
        self._board.deSelectAll()
        playerCountries = []
        for country in self._board.getCountries():
            if country.getOwner() == self._playerTurn:
                if country.getArmies != 1:
                    playerCountries.append(country)
        for country in playerCountries:
            adjacent = []
            for other in country.getAdjacent():
                for count in self._board.getCountries():
                    if count.getName() == other:
                        adjacent.append(count)
            for other in adjacent:
                if other.getOwner() != self._playerTurn:
                    country.highlight()
        
    def initPhaseTwo(self):
        """ Sets up phase 2. """
        self._board.unHighlightAll()
        self._board.deSelectAll()
        playerCountries = []
        for country in self._board.getCountries():
            if country.getOwner() == self._playerTurn:
                playerCountries.append(country)
        for country in playerCountries:
            adjacent = []
            for other in country.getAdjacent():
                for count in self._board.getCountries():
                    if count.getName() == other:
                        adjacent.append(count)
            for other in adjacent:
                if other.getOwner() == self._playerTurn:
                    country.highlight()
            
    def reportYes(self):
        """ Initiates phase 1 or 2 if the player chooses to do so. """
        if self._phase == 0:
            self.initPhaseZero()
            self._prompts.hideAll()
        if self._phase == 1:
            self.initPhaseOne()
            self._prompts.hideAll()
            self._prompts.phase1_2()
        if self._phase == 2:
            self.initPhaseTwo()
            self._prompts.hideAll()
            self._prompts.phase2_2()
        
    def reportNo(self):
        """ Changes the phase whenever the player chooses to. """
        if self._phase == 1 or self._phase == 2 or self._armies == 0:
            self.changePhase()
            
    def endGame(self, player):
        """ Ends the game. """
        self._board.unHighlightAll()
        self._board.deSelectAll()
        self._yes.hide()
        self._no.hide()
        input("Player " + player.getName() + "has won! Congratulations!!!")
    
class Yes(EventHandler):
    """ Reports whether the player wants to initiate a phase. """
    def __init__(self, game, win):
        """ Constructor for the Yes class. """
        EventHandler.__init__(self)
        self._game = game
        self._yes = Square(50, (487, 282))
        self._yes.setFillColor("green")
        win.add(self._yes)
        self._yes.addHandler(self)
        
    def handleMouseRelease(self, event):
        """ Reports yes to the game. """
        self._game.reportYes()
        
    def hide(self):
        """ Hides the button. """
        self._yes.setDepth(200)
        
    def show(self):
        """ Shows the button. """
        self._yes.setDepth(0)
    
class No(EventHandler):
    """ Reports whether the player wants to end a phase. """
    def __init__(self, game, win):
        """ Constructor for the No class. """
        EventHandler.__init__(self)
        self._game = game
        self._no = Square(50, (491, 368))
        self._no.setFillColor("red")
        win.add(self._no)
        self._no.addHandler(self)
    
    def handleMouseRelease(self, event):
        """ Reports no to the game. """
        self._game.reportNo()
        
    def hide(self):
        """ Hides the button"""
        self._no.setDepth(200)
        
    def show(self):
        """ Shows the button. """
        self._no.setDepth(0)
    
    
class Player:
    """ The player of the game. """
    def __init__(self, playerNumber, game, board):
        """ Constructor for the Player class. """
        self._name = playerNumber
        self._game = game
        self._board = board
        
    def checkLoss(self):
        """ Checks to see whether the player has lost the game. If the player
            has lost, returns True. Otherwise, returns False. """
        notOwned = 0
        for country in self._board.getCountries():
            if country.getOwner() != self._name:
                notOwned += 1
        return notOwned == len(self._board.getCountries())
        
    def checkVictory(self):
        """ Checks to see whether the player has won the game. If the player
            has won, returns True. Otherwise, returns False. """
        owned = 0
        for country in self._board.getCountries():
            if country.getOwner() == self._name:
                owned += 1
        return owned == len(self._board.getCountries())
        
    def removeFrom(self, lst):
        """ Removes the player from a list. """
        lst.remove(self)
        
    def victory(self):
        """ Makes the player the winner. """
        self._board.endGame(self)
        
class Prompt:
    """ One individual prompt. """
    def __init__(self, txt):
        """ Constructor for the Prompt class. """
        self._text = Text(txt, (644, 310))
        self._background = Rectangle(300, 100, (644, 310))
        self._used = False
        
    def addTo(self, win):
        """ Adds the prompt to the window. """
        win.add(self._text)
        win.add(self._background)
        
    def show(self):
        """ Shows the prompt. """
        if not self._used:
            self._background.setDepth(1)
            self._text.setDepth(0)
            self.used()
        
    def hide(self):
        """ Hides the prompt. """
        self._background.setDepth(300)
        self._text.setDepth(300)
        
    def getUsed(self):
        """ Returns whether the prompt has been used this turn. """
        return self._used
        
    def used(self):
        """ Makes the prompt used. """
        self._used = True
    
    def unUsed(self):
        """ Makes the prompt unused. """
        self._used = False
        
class Prompts:
    """ Prompts the player as to what to do. """
    def __init__(self, win):
        """ Constructor for the Prompts class. """
        self._phase0 = Prompt("Choose where to place your armies. When you " +
                              "are done, press \"No\". Press \"Yes\" " +
                              "to start.")
        self._phase1_1 = Prompt("Would you like to attack?")
        self._phase1_2 = Prompt("Choose where you would like to attack from. " +
                                "Press \"Yes\" to start")
        self._phase1_3 = Prompt("Choose where you would like to attack. " +
                                "Press \"Yes\" to start")
        self._phase2_1 = Prompt("Would you like to fortify?")
        self._phase2_2 = Prompt("Choose where you would like to fortify from." +
                                " Press \"Yes\" to start")
        self._phase2_3 = Prompt("Choose where you would like to fortify. " +
                                "Press \"Yes\" to start")
        self._win = win
        
    def addTo(self):
        """ Adds all the prompts to the window. """
        self._phase0.addTo(self._win)
        self._phase1_1.addTo(self._win)
        self._phase1_2.addTo(self._win)
        self._phase1_3.addTo(self._win)
        self._phase2_1.addTo(self._win)
        self._phase2_2.addTo(self._win)
        self._phase2_3.addTo(self._win)
        
    def phase0(self):
        """ Shows the phase 0 prompt. """
        self._phase0.show()
        
    def phase1_1(self):
        """ Shows the phase 1_1 prompt. """
        self._phase1_1.show()
        
    def phase1_2(self):
        """ Shows the phase 1_2 prompt. """
        self._phase1_2.show()
        
    def phase1_3(self):
        """ Shows the phase 1_3 prompt. """
        self._phase1_3.show()
        
    def phase2_1(self):
        """ Shows the phase 2_1 prompt. """
        self._phase2_1.show()
        
    def phase2_2(self):
        """ Shows the phase 2_2 prompt. """
        self._phase2_2.show()
        
    def phase2_3(self):
        """ Shows the phase 2_3 prompt. """
        self._phase2_3.show()
        
    def hideAll(self):
        """ Hides all the prompts. """
        self._phase0.hide()
        self._phase1_1.hide()
        self._phase1_2.hide()
        self._phase1_3.hide()
        self._phase2_1.hide()
        self._phase2_2.hide()
        self._phase2_3.hide()
        
def getHighest(lst):
    """ Returns the highest integer found in a list. """
    highest = 0
    for num in lst:
        if num > highest:
            highest = num
    return highest
        
def main(win):
    """ Runs and sets up the game. """
    game = Game(PLAYERS, win, CONTINENTS, VALUES)
    
    game.setUp()
    
StartGraphicsSystem(main, 1288, 620)
    
                
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
